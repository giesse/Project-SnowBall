Topaz [
    Title: "Definition of BLOCK! values"
    Author: "Gabriele Santilli"
    Version: ;1.0.0
    Type: Datatype
]

name: 'block!
based-on: 'value!
properties: [
    values:        array of val!
    pos:           int!
    tail-newline?: bit!
]
maker: func [] [
    [
        values: reduce []
        pos:    0
    ]
]
reflectors: [
    index: [normalize value  make integer! value/pos]
    length: [normalize value  make integer! (length-of value/values) - value/pos]
]
actions: [
    insert: func [
        block
        value [val!]
        only [bit!]

        return: block
    ] [
        normalize block
        switch-type value [
            any-block! [
                either only [
                    len: 1
                    insert-one block value
                ] [
                    normalize value
                    len: (length-of value/values) - value/pos
                    insert-many block value/values value/pos len
                ]
            ]
            any-type! [
                len: 1
                insert-one block value
            ]
        ]
        make block [
            pos: pos + len
        ]
    ]
    skip: func [
        block
        amount [int!]

        return: block
    ] [
        make block [
            pos: max 0 min length-of block/values pos + amount
        ]
    ]
    mold: func [
        block
        only [bit!]
        flat [bit!]
        limit [val!]
        indent [str!]

        return: text [str!]
    ] [
        ; note: we're going to limit MOLD to 2GB
        switch-type limit [
            integer! [lim: to int! limit]
            none! [lim: 2147483648]
        ]
        mold-values
            either only [""] ["["] ; open
            either only [""] [either block/tail-newline? [rejoin ["^/" indent "]"]] ["]"]] ; close
            " " ; sep
            flat ; flat
            either flat [" "] ["^/"] ; newline
            either flat [""] [rejoin [indent "    "]] ; indent
            lim ; limit
            block/values ; values
            block/pos ; pos
    ]
    bind: func [
        block
        context [val!]
        copy [bit!]
        new [bit!]

        return: block
    ] [
    ]
    get-path: func [
        block
        selector [val!]

        return: result [val!]
    ] [
        switch-type selector [
            integer! [
                normalize block
                pos: block/pos + to int! selector
                either any [pos < 0 pos >= length-of block/values] [
                    make none! none
                ] [
                    block/values/(pos)
                ]
            ]
            any-type! [
                cause-error 'script 'invalid-path selector
            ]
        ]
    ]
    set-path: func [
        block
        selector [val!]
        set-to [val!]

        return: set-to
    ] [
        switch-type selector [
            integer! [
                normalize block
                pos: block/pos + to int! selector
                either any [pos < 0 pos >= length-of block/values] [
                    cause-error 'script 'out-of-range selector
                ] [
                    block/values/(pos): set-to
                ]
            ]
            any-type! [
                cause-error 'script 'invalid-path selector
            ]
        ]
        set-to
    ]
]
support: [
    normalize: func [
        "Ensure that block/pos is not past the end of the block/values array"
        block [any-block!]
    ] [
        if block/pos > length-of block/values [
            block/pos: length-of block/values
        ]
    ]
    insert-one: func [
        "Insert one value into a block"
        block [any-block!]
        value [val!]
    ] [
        shift-array block/values block/pos 1
        block/values/(block/pos): value
    ]
    insert-many: func [
        "Insert many values into a block"
        block [any-block!]
        values [array of val!]
        from [int!]
        len [int!]
    ] [
        shift-array block/values block/pos len
        max-i: block/pos + len
        for [i: block/pos j: from] [i < max-i] [inc [i j]] [
            block/values/(i): values/(j)
        ]
    ]
    mold-values: func [
        "Mold an array of values"
        open [str!]
        close [str!]
        sep [str!]
        flat [bit!]
        nlsep [str!]
        indent [str!]
        limit [int!]
        values [array of val!]
        pos [int!]

        return: result [str!]
    ] [
        result: open
        if pos < length-of values [
            value: mold values/(pos) false flat limit indent
            limit: limit - length-of value
            result: rejoin [
                result
                either values/(pos)/new-line? [nlsep] [""]
                value
            ]
            pos: pos + 1
            while [all [limit > 0 pos < length-of values]] [
                value: mold values/(pos) false flat limit indent
                limit: limit - length-of value
                result: rejoin [
                    result
                    either values/(pos)/new-line? [nlsep] [sep]
                    value
                ]
                pos: pos + 1
            ]
        ]
        either limit >= length-of close [
            rejoin [result close]
        ] [
            result: rejoin [result copy-array close 0 limit]
            len: length-of result
            if len > 3 [
                result/(len - 1): #"."
                result/(len - 2): #"."
                result/(len - 3): #"."
            ]
            result
        ]
    ]
]
