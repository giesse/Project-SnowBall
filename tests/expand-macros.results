string! "func [a b][multiply a add b 3]" block! [
    root: reduce ['root none copy []] 
    node: reduce ['branch none copy []] insert/only poke node 2 tail root node 
    node: reduce ['leaf none copy []] insert/only poke node 2 tail pick root 4 node 
    node: reduce ['branch none copy []] insert/only poke node 2 tail root node 
    node: reduce ['branch none copy []] insert/only poke node 2 tail pick root 5 node 
    node: reduce ['leaf none copy []] insert/only poke node 2 tail pick pick root 5 4 node 
    node: reduce ['leaf none copy []] insert/only poke node 2 tail pick pick root 5 4 node
] block! [
    in-func 'split-branch 
    unless block? base [base: reduce [base]] 
    unless knots [knot-nodes: []] 
    unless prune [prune-nodes: []] 
    unless block? knot-nodes [knot-nodes: reduce [knot-nodes]] 
    unless block? prune-nodes [prune-nodes: reduce [prune-nodes]] 
    node: niwashi/current-node 
    branch: copy [] 
    to-leave: clear [] 
    while [not find base type: first node] [
        if find knot-nodes type [
            throw make error! join "Cannot cut through '" [type "' nodes"]
        ] 
        unless find prune-nodes type [
            new-node: reduce [type #[none] copy third node] 
            insert/only branch new-node
        ] 
        append/only to-leave node 
        unless node: all [_tmp: second node head _tmp] [
            throw make error! join "No nodes of type '" [base "' found in the current branch"]
        ]
    ] 
    niwashi/current-node: node 
    foreach node to-leave [
        on-leave niwashi node
    ] 
    niwashi/branch: branch 
    out-func 'split-branch
] block! [1 2 3]