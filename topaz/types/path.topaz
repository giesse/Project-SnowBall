Topaz [
    Title: "Topaz types: PATH!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: PATH! ==========================================================

insert-path: function [
    "Insert a value at the current position of the series"
    path [any-path!]
    value
    options:
        only: no [logic!] "Insert series as a single value"
        new-line: no [logic!] "Temporary - add new line before value on MOLD"
] [tmp] [
    either all [not only any-block? value] [
        insert-array2 path/values path/pos tmp: copy-array value/values value/pos
        make-path path/type make-struct [
            values: path/values
            pos: path/pos + length-of-array tmp
        ]
    ] [
        insert-array path/values path/pos value
        make-path path/type make-struct [
            values: path/values
            pos: path/pos + 1
        ]
    ]
]

skip-path: function [path amount] [pos len] [
    pos: path/pos + amount
    case [
        pos > len: length-of-array path/values [pos: len]
        pos < 0 [pos: 0]
    ]
    make-path path/type make-struct [
        values: path/values
        pos: pos
    ]
]

head-path: function [path] [] [
    make-path path/type make-struct [
        values: path/values
    ]
]

tail-path: function [path] [] [
    make-path path/type make-struct [
        values: path/values
        pos: length-of-array path/values
    ]
]

slice-path: function [
    "Copy part of a path"
    start [any-block!]
    end-or-length [any-block! number!]
] [end] [
    either any-block? end-or-length [
        end: end-or-length/pos
    ] [
        end: start/pos + end-or-length/number
    ]
    make-path start/type make-struct [
        values: slice-array start/values start/pos end
    ]
]

make-type 'path! [
    make: function [arguments] [] [make-path path! arguments]
    topaz-make: function [value] [] [topaz-make-path path! value]
    insert: :insert-path
    head: :head-path
    tail: :tail-path
    skip: :skip-path
    pick: :pick-block
    length-of: :length-of-block
    mold: function [
        "Return a LOAD-able text representation of a value"
        block
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        mold-values [
            open: ""
            close: ""
            sep: "/"
            flat: true
            nlsep: "/"
            indent: ""
            limit: limit
            only: false
            values: block/values
            newlines: make-array
            pos: block/pos
        ]
    ]
    do: function [path block] [value] [
        if empty? path [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Empty PATH! value"
            ]
        ]
        value: get first path
        path: skip path 1
        while [not empty? path] [
            value: get-path value first path
            path: skip path 1
        ]
        either word-active? value [
            apply value/type/do [value block]
        ] [
            reduce [value skip block 1]
        ]
    ]
    bind: :bind-block
    compile: function [path block] [value expr] [
        if empty? path [
            error make-struct [
                category: "Compilation"
                id: "invalid-path"
                message: "Empty PATH! value"
            ]
        ]
        value: get/any first path
        either all [value word-active? value] [
            path: skip path 1
            while [not empty? path] [
                value: get-path value first path
                path: skip path 1
            ]
            apply value/type/compile [value block]
        ] [
            expr: ast-get first path
            path: skip path 1
            while [not empty? path] [
                expr: ast-get-path expr first path
                path: skip path 1
            ]
            reduce [expr skip block 1]
        ]
    ]
    equal?: :default-equal?
    copy: function [value] [] [copy-path path! value]
    slice: :slice-path
]
path!/("path!"): make-struct [
    equal?: :compare-blocks
]
path!/("set-path!"): make-struct [
    equal?: :compare-blocks
]
path!/("lit-path!"): make-struct [
    equal?: :compare-blocks
]

make-path: function [type args] [] [
    if not args [args: make-struct []]
    make-struct [
        type: type
        values: any [args/values make-array]
        pos: any [args/pos 0]
    ]
]

topaz-make-path: function [type value] [] [
    switch-default value/type/name [
        "block!"    [copy-path type value]
        "paren!"    [copy-path type value]
        "path!"     [copy-path type value]
        "lit-path!" [copy-path type value]
        "set-path!" [copy-path type value]
    ] [make-path type none]
]

copy-path: function [type value] [] [
    make-path type make-struct [
        values: apply value/values/slice [value/pos]
    ]
]

make-newlines: function [values] [newlines] [
    newlines: make-array
    foreach 'item values [
        append-array newlines false
    ]
    newlines
]
path-to-block: function [type value] [values] [
    values: apply value/values/slice [value/pos]
    make-block type make-struct [
        values: values
        newlines: make-newlines values
    ]
]

parse-path: function [text] [path value] [
    if all [value: parse-word-chars text  #"/" = pick text length-of-array value] [
        path: make path! none
        path: insert path make word! value
        text: skip text length-of-array value
        while [all [not empty? text  #"/" = first text]] [
            set [value text] parse-path-element skip text 1
            either value [
                path: insert/only path value
            ] [
                error make-struct [
                    category: "Syntax"
                    id: "load-error"
                    message: "Parse error"
                    stack: text
                ]
            ]
        ]
        reduce [head path text]
    ]
]
