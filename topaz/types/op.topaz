Topaz [
    Title: "Topaz types: OP!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: OP! ============================================================

make-type 'op! [
    make: function [arguments] [] [
        if 2 <> arguments/mandatory [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Function must take exactly two arguments"
            ]
        ]
        make-struct [
            type: op!
            func: arguments
        ]
    ]
    topaz-make: function [func] [] [
        switch-default func/type/name [
            "function!" [apply op!/make [func]]
            "native!" [apply op!/make [func]]
            "action!" [apply op!/make [func]]
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for MAKE OP!"
                args: func
            ]
        ]
    ]
    mold: function [
        "Return a LOAD-able text representation of a value"
        op
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        limit-string rejoin ["make op! " mold/options [value: op/func flat: flat limit: limit indent: indent]] limit
    ]
    do: function [op block] [] [
        error make-struct [
            category: "Script"
            id: "invalid-infix"
            message: "Infix use of OP!s is not supported"
        ]
    ]
    bind: :default-bind
    compile: function [op block] [] [
        error make-struct [
            category: "Compilation"
            id: "invalid-infix"
            message: "Infix use of OP!s is not supported"
        ]
    ]
    equal?: :default-equal?
]

operator?: function [block] [value] [
    all [
        not empty? block
        word? value: first block
        value: get-any value
        op? value
        value
    ]
]
do-op: function [op arg1 arg2] [args] [
    args: apply op/func/type/prepare-arguments [op/func]
    args: apply op/func/type/set-argument [op/func args op/func/args-list/0 arg1]
    args: apply op/func/type/set-argument [op/func args op/func/args-list/1 arg2]
    apply op/func/type/call [op/func args]
]
