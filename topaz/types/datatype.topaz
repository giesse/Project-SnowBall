Topaz [
    Title: "Topaz types: DATATYPE!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: DATATYPE! ======================================================

; datatype! has a circular reference
datatype!: none

datatypes: make-array

; make-type is defined as a macro in compile-topaz.topaz

make-type 'datatype! [
    mold: function [
        "Return a LOAD-able text representation of a value"
        type
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        limit-string type/name limit
    ]
    do: function [type block] [] [
        reduce [type skip block 1]
    ]
    bind: :default-bind
    topaz-make: function [ignored] [] [
        error make-struct [
            category: "Internal"
            id: "not-implemented"
            message: "Cannot make datatypes (yet)"
        ]
    ]
    compile: function [type block] [] [
        reduce [ast-value type skip block 1]
    ]
    equal?: function [type value] [] [false]
]
datatype!/("datatype!"): make-struct [
    equal?: function [type1 type2] [] [type1/name = type2/name]
]

; fix the circular reference
datatype!/type: datatype!
