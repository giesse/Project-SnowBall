; Topaz types: OBJECT!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: OBJECT! ========================================================

object!: make-type "object!" [
    make: function [args] [] [
        if not args [args: make-struct []]
        make-struct [
            type: object!
            parent: args/parent
            words: any [args/words make-array]
            map: any [args/map make-struct []]
        ]
    ]
    topaz-make: function [code] [obj parent] [
        switch code/type/name [
            "block!" [
                parent: first code
                case [
                    parent/type/name = "none!" [parent: none]
                    parent/type/name <> "object!" [
                        error make-struct [
                            category: "Script"
                            id: "invalid-spec"
                            message: "Invalid object parent"
                            args: parent
                        ]
                    ]
                ]
                obj: make object! make-struct [parent: parent]
                parse-object-spec obj second code
            ]
            "object!" [
                obj: make object! make-struct [parent: code]
            ]
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for MAKE OBJECT!"
                args: code
            ]
        ]
        obj
    ]
    mold: function [obj indent] [block i] [
        block: make block! none
        foreach 'word obj/words [
            block: insert insert-nl block make set-word! word true obj/map/:word
        ]
        new-line block true
        rejoin ["object " either obj/parent [mold-value obj/parent indent] ["none"] " " mold-value head block indent]
    ]
    do: function [object block] [] [
        reduce [object skip block 1]
    ]
    bind: function [value context extend?] [] [value]
    compile: function [object block] [] [
        reduce [ast-value object skip block 1]
    ]
    get-path: function [object selector] [] [
        if not any-word? selector [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        get-word-in-object object selector/word
    ]
    set-path: function [object selector set-to] [] [
        if not any-word? selector [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        set-word-in-object object selector/word set-to
    ]
    equal?: :default-equal?
    in?: function [object word] [] [
        if not any-word? word [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for IN? OBJECT!"
                args: word
            ]
        ]
        make logic! either object/map/(word/word) [true] [false]
    ]
]

in-object?: function [obj word] [] [
    0 <= apply 'obj/words/index-of [word]
]

set-word-in-object: function [object word set-to] [] [
    if not in-object? object word [append-array object/words word]
    object/map/(word): set-to
]
get-word-in-object: function [object word] [] [
    any [object/map/:word either object/parent [get-word-in-object object/parent word] [make none! none]]
]

parse-object-spec: function [obj spec] [word value] [
    while [not empty? spec] [
        word: first spec
        switch word/type/name [
            "set-word!" [
                set [value spec] do-step second spec next spec
                set-word-in-object obj word/word value
            ]
            "word!" [
                spec: next spec
                set-word-in-object obj word/word make logic! true
            ]
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-spec"
                message: "Invalid object spec value"
                args: word
                stack: spec
            ]
        ]
    ]
    obj
]
