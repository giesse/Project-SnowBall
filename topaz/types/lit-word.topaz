; Topaz types: LIT-WORD!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: LIT-WORD! ======================================================

lit-word!: make-type "lit-word!" [
    make: function [arguments] [] [
        make-struct [
            type: lit-word!
            word: arguments
            context: none
            offset: none
        ]
    ]
    topaz-make: function [string] [] [
        apply 'lit-word!/make [string/string]
    ]
    mold: function [word indent] [] [
        "'" + word/word
    ]
    do: function [word block] [] [
        word: make-struct [
            type: word!
            word: word/word
            context: word/context
            offset: word/offset
        ]
        reduce [word skip block 1]
    ]
    bind: function [word context extend?] [] [
        bind-word context make-struct [
            type: lit-word!
            word: word/word
            context: word/context
            offset: word/offset
        ] extend?
    ]
    compile: function [word block] [] [
        reduce [
            ast-value make-struct [
                type: word!
                word: word/word
                context: word/context
                offset: word/offset
            ]
            skip block 1
        ]
    ]
    equal?: function [word value] [] [false]
]
lit-word!/("word!"): make-struct [
    equal?: :compare-words
]
lit-word!/("get-word!"): make-struct [
    equal?: :compare-words
]
lit-word!/("set-word!"): make-struct [
    equal?: :compare-words
]
lit-word!/("lit-word!"): make-struct [
    equal?: :compare-words
]

parse-lit-word: function [text] [w] [
    if all [#"'" = first text  w: parse-word-chars skip text 1] [
        reduce [
            make lit-word! w
            skip text 1 + length-of-array w
        ]
    ]
]
