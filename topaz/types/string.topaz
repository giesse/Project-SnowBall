Topaz [
    Title: "Topaz types: STRING!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: STRING! ========================================================

slice-string: function [
    "Copy part of a string"
    start [any-string!]
    end-or-length [any-string! number!]
] [end] [
    either any-string? end-or-length [
        end: end-or-length/pos
    ] [
        end: start/pos + end-or-length/number
    ]
    make-string start/type slice-array start/string start/pos end 0
]

make-type 'string! [
    make: function [arguments] [] [make-string string! arguments 0]
    topaz-make: function [value] [] [
        switch-default value/type/name [
            "none!" [make-string string! "" 0]
            "string!" [make-string string! to-js-string value 0]
            "file!" [make-string string! to-js-string value 0]
        ] [
            make-string string! mold value 0
        ]
    ]
    length-of: function [string] [] [
        (length-of-array string/string) - string/pos
    ]
    pick: function [string pos] [] [
        pick-array string/string string/pos + pos
    ]
    skip: function [string amount] [] [
        make-string string! string/string string/pos + amount
    ]
    tail: function [string] [] [
        make-string string! string/string length-of-array string/string
    ]
    mold: function [
        "Return a LOAD-able text representation of a value"
        string
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        limit-string rejoin ["^"" escape limit-string string/string limit #"^""] limit
    ]
    do: function [string block] [] [
        reduce [string skip block 1]
    ]
    bind: :default-bind
    compile: function [string block] [] [
        reduce [ast-value string skip block 1]
    ]
    equal?: :default-equal?
    copy: function [string] [] [
        make-string string! to-js-string string 0
    ]
    slice: :slice-string
]
equal-string?: function [string1 string2] [] [
    (to-js-string string1) = to-js-string string2
]
string!/("string!"): make-struct [
    equal?: :equal-string?
]
string!/("file!"): make-struct [
    equal?: :equal-string?
]

escape: function [str] [re result match i] [
    re: regexp "[\x00-\x19^^^"]" "mg"
    result: ""
    i: 0
    while [match: apply re/exec [str]] [
        result: result + apply str/substr [i match/index - i]
        switch-default pick-array str match/index [
            #"^^" [
                result: result + "^^^^"
            ]
            #"^/" [
                result: result + "^^/"
            ]
            #"^"" [
                result: result + "^^^""
            ]
            #"^-" [
                result: result + "^^-"
            ]
            #"^!" [
                result: result + "^^!"
            ]
        ] [
            result: rejoin [result #"^^" to-char (apply str/char-code-at [match/index]) + 64]
        ]
        i: match/index + 1
    ]
    either i = 0 [
        str
    ] [
        result + apply str/substr [i]
    ]
]
unescape: function [str] [result i j ch p] [
    result: ""
    i: 0
    while [0 <= j: apply str/index-of [#"^^" i]] [
        result: result + apply str/substr [i j - i]
        ch: pick-array str j + 1
        switch-default ch [
            #"/" [
                result: result + #"^/"
                i: j + 2
            ]
            #"-" [
                result: result + #"^-"
                i: j + 2
            ]
            #"^^" [
                result: result + #"^^"
                i: j + 2
            ]
            #"!" [
                result: result + #"^!"
                i: j + 2
            ]
        ] [
            case [
                all [ch >= #"@"  ch <= #"_"] [
                    result: result + to-char (apply ch/char-code-at [0]) - 64
                    i: j + 2
                ]
                all [
                    ch = #"("
                    p: exec-re apply str/substr [j + 1] regexp "^^\(([0-9A-Fa-f]+)\)" ""
                ] [
                    result: result + to-char apply parse-int [pick-array p 1 16]
                    i: j + 1 + length-of-array pick-array p 0
                ]
                'else [
                    result: result + ch
                    i: j + 2
                ]
            ]
        ]
    ]
    either i = 0 [
        str
    ] [
        result + apply str/substr [i]
    ]
]
to-js-string: function [string] [] [
    apply string/string/substr [string/pos]
]
match-string?: function [string match] [] [
    match = apply string/string/substr [string/pos match/length]
]

make-string: function [type string pos] [] [
    make-struct [
        type: type
        string: string
        pos: pos
    ]
]

parse-string: function [text] [t] [
    if #"^"" = pick text 0 [
        t: exec-re to-js-string text regexp "^^^"(([^^^"^^\f\n\r]*|\^^\([0-9A-Fa-f]+\)|\^^[^^\f\n\r])*)^"" ""
        either t [
            reduce [
                make string! unescape pick-array t 1
                skip text length-of-array pick-array t 0
            ]
        ] [
            error make-struct [
                category: "Syntax"
                id: "load-error"
                message: "Missing ^""
                stack: text
            ]
        ]
    ]
]
