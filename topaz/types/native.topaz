; Topaz types: NATIVE!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: NATIVE! ========================================================

make-type 'native! [
    make: function [arguments] [fnc] [
        fnc: make-struct [
            type: native!
            mode: "fixed" ; default invocation syntax
            fixed-list: make-array ; list of mandatory arguments
            args: make-struct [] ; map of all arguments
            flags: make-array ; active flags
            context: make context! none ; simplifies code, not optimal
            spec: arguments/0
            func: arguments/1
            compile: arguments/2
        ]
        parse-function-spec fnc
        if 3 < length-of-array fnc/fixed-list [fnc/mode: "named"]
        fnc
    ]
    topaz-make: function [block] [spec name f c] [
        if not block? block [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for MAKE NATIVE!"
                args: block
            ]
        ]
        if 2 <> length-of block [
            error make-struct [
                category: "Script"
                id: "invalid-spec"
                message: "MAKE NATIVE! requires a spec and a name, not"
                args: block
            ]
        ]
        if not block? spec: first block [
            error make-struct [
                category: "Script"
                id: "invalid-spec"
                message: "Native spec must be a BLOCK!, not"
                args: spec/type
            ]
        ]
        if not word? name: second block [
            error make-struct [
                category: "Script"
                id: "invalid-spec"
                message: "Native name must be a WORD!, not"
                args: name/type
            ]
        ]
        name: name/word
        f: natives/(name-to-js name)
        c: native-compilers/(name-to-js name)
        apply 'native!/make [reduce [spec f c]]
    ]
    mold: function [func indent] [] [
        "native " + mold-value func/spec indent
    ]
    do: function [func block] [args] [
        if not func/func [
            error make-struct [
                category: "Internal"
                id: "not-implemented"
                message: "This is a compiler-only native"
            ]
        ]
        push-context func/context
        block: collect-function-arguments func block
        args: func/context/values
        pop-context func/context
        reduce [apply 'func/func/apply [none args] block]
    ]
    bind: function [func context extend?] [] [func]
    compile: function [func block] [args] [
        if not func/compile [
            error make-struct [
                category: "Internal"
                id: "not-implemented"
                message: "This is a interpreter-only native"
            ]
        ]
        push-context func/context
        block: compile-function-arguments func block false
        args: func/context/values
        pop-context func/context
        reduce [apply 'func/compile/apply [none args] block]
    ]
    equal?: :default-equal?
    get-path: :function-get-path
]
