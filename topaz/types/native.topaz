; Topaz types: NATIVE!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: NATIVE! ========================================================

native!: make-type "native!" [
    make: function [arguments] [spec f c] [
        set [spec f c] arguments
        make-struct [
            type: native!
            spec: spec
            func: f
            compile: c
        ]
    ]
    topaz-make: function [arguments] [spec name f c] [
        set [spec name] arguments/values
        name: name/word
        f: natives/(name-to-js name)
        c: native-compilers/(name-to-js name)
        if any [f/length <> length-of spec c/length <> length-of spec] [
            error "Script" rejoin [
                "The native code for " apply 'name/to-upper-case []
                " does not match the number of arguments in the spec"
            ] mold-value spec ""
        ]
        apply 'native!/make [reduce [spec f c]]
    ]
    mold: function [func indent] [] [
        "native " + mold-value func/spec indent
    ]
    do: function [func block] [args] [
        args: make-array
        block: collect-arguments length-of func/spec args skip block 1
        reduce [apply 'func/func/apply [none args] block]
    ]
    bind: function [func context extend?] [] [
        func
    ]
    compile: function [func block] [args] [
        args: make-array
        block: compile-arguments args length-of func/spec skip block 1 false
        reduce [apply 'func/compile/apply [none args] block]
    ]
    equal?: function [func value] [] [false]
]
