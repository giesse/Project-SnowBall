Topaz [
    Title: "Topaz types: NATIVE!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: NATIVE! ========================================================

make-type 'native! [
    make: function [arguments] [fnc] [
        fnc: make-func-object native! arguments/0
        fnc/arguments: make-array
        fnc/func: arguments/1
        fnc/compile: arguments/2
        parse-function-spec fnc
        fnc
    ]
    topaz-make: function [block] [spec name f c] [
        if not block? block [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for MAKE NATIVE!"
                args: block
            ]
        ]
        if 2 <> length-of block [
            error make-struct [
                category: "Script"
                id: "invalid-spec"
                message: "MAKE NATIVE! requires a spec and a name, not"
                args: block
            ]
        ]
        if not block? spec: first block [
            error make-struct [
                category: "Script"
                id: "invalid-spec"
                message: "Native spec must be a BLOCK!, not"
                args: spec/type
            ]
        ]
        if not word? name: second block [
            error make-struct [
                category: "Script"
                id: "invalid-spec"
                message: "Native name must be a WORD!, not"
                args: name/type
            ]
        ]
        name: name/word
        f: natives/(name-to-js name)
        c: native-compilers/(name-to-js name)
        apply native!/make [reduce [spec f c]]
    ]
    mold: function [
        "Return a LOAD-able text representation of a value"
        func
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        limit-string rejoin ["native " mold/options [value: func/spec flat: flat limit: limit indent: indent]] limit
    ]
    do: :function-do
    prepare-arguments: function [func] [] [clone-array func/arguments]
    call: function [func args] [] [
        if not func/func [
            error make-struct [
                category: "Internal"
                id: "not-implemented"
                message: "This is a compiler-only native"
            ]
        ]
        apply func/func/apply [none args]
    ]
    call-two: function [func arg1 arg2] [] [
        if not func/func [
            error make-struct [
                category: "Internal"
                id: "not-implemented"
                message: "This is a compiler-only native"
            ]
        ]
        apply func/func [arg1 arg2]
    ]
    bind: :default-bind
    compile: function [func block] [] [function-compile func block false]
    call-compile: function [func args] [] [
        if not func/compile [
            error make-struct [
                category: "Internal"
                id: "not-implemented"
                message: "This is a interpreter-only native"
            ]
        ]
        apply func/compile/apply [none args]
    ]
    equal?: :default-equal?
    get-path: :function-get-path
    set-argument: function [func args arg value] [] [
        args/(arg/offset): value
        args
    ]
    get-argument: function [func args arg] [] [args/(arg/offset)]
    add-argument: function [func arg dflt] [] [
        arg/offset: length-of-array func/arguments
        apply func/arguments/push [dflt]
    ]
    set-return: function [func spec] [] []
    compile-default-arguments: function [func args wrap?] [] [
        ; prepare default arguments
        foreach [value pos] args [
            if value [
                ; only immediate values supported
                args/(pos): either wrap? [make expression! ast-value value] [ast-value value]
            ]
        ]
    ]
]
