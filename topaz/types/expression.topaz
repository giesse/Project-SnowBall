; Topaz types: EXPRESSION!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: EXPRESSION! ====================================================

; (This is a temporary type used for compiler macros.)

make-type 'expression! [
    make: function [arguments] [] [
        make-struct [
            type: expression!
            expr: arguments
        ]
    ]
    topaz-make: function [code] [] [
        either code/type/name = "block!" [
            code: compile code
            if 1 = length-of-array code/list [code: pick-array code/list 0]
            apply expression!/make [code]
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invaild argument for MAKE EXPRESSION!"
                args: code
            ]
        ]
    ]
    mold: function [
        "Return a LOAD-able text representation of a value"
        expr
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [js] [
        try [js: to-js expr/expr "statement"] 'e [js: "TO-JS error"]
        limit-string rejoin ["#[expr " expr/expr/node-type " {" js "}]"] limit
    ]
    do: function [expr block] [] [
        reduce [expr skip block 1]
    ]
    bind: :default-bind
    compile: function [expr block] [] [
        reduce [expr/expr skip block 1]
    ]
    equal?: :default-equal?
    get-path: function [expr selector] [] [
        if any [
            selector/type/name <> "word!"
            selector/word <> "value"
            not test-re expr/expr/node-type regexp "^^value\/.*" ""
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        expr/expr/value
    ]
    copy: function [value] [] [value]
]
