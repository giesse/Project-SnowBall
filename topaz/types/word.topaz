Topaz [
    Title: "Topaz types: WORD!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: WORD! ==========================================================

compare-words: function [word1 word2] [] [word1/word = word2/word]

make-type 'word! [
    make: function [arguments] [] [make-word word! arguments none]
    topaz-make: function [value] [] [topaz-make-word word! value]
    mold: function [
        "Return a LOAD-able text representation of a value"
        word
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [limit-string word/word limit]
    do: function [word block] [value] [
        value: get word
        case [
            word-active? value [
                apply value/type/do [value block]
            ]
            'else [
                reduce [value skip block 1]
            ]
        ]
    ]
    bind: function [
        "Bind words to a specified context"
        word
        context [context!]
        options:
            copy: no [logic!] "Bind a (deep) copy of WORDS"
            new: no [logic!] "Add all words to CONTEXT"
    ] [] [bind-word context word new]
    compile: function [word block] [value] [
        value: get-any word
        either all [
            value
            compiler-word-active? value
        ] [
            apply value/type/compile [value block]
        ] [
            reduce [ast-get word skip block 1]
        ]
    ]
    equal?: :default-equal?
]
word!/("word!"): make-struct [
    equal?: :compare-words
]
word!/("get-word!"): make-struct [
    equal?: :compare-words
]
word!/("set-word!"): make-struct [
    equal?: :compare-words
]
word!/("lit-word!"): make-struct [
    equal?: :compare-words
]

make-word: function [type word args] [] [
    if not args [args: make-struct []]
    make-struct [
        type: type
        word: word
        context: args/context
        offset: args/offset
    ]
]

topaz-make-word: function [type value] [] [
    switch-default value/type/name [
        "string!" [make-word type to-js-string value none]
        "word!" [convert-word value type]
        "set-word!" [convert-word value type]
        "get-word!" [convert-word value type]
        "lit-word!" [convert-word value type]
        "datatype!" [bind-word system-words make-word type value/name none true]
    ] [
        error make-struct [
            category: "Script"
            id: "invalid-argument"
            message: rejoin ["Invalid argument for MAKE " apply type/name/to-upper-case []]
            args: value
        ]
    ]
]

convert-word: function [word type] [] [
    make-word type word/word make-struct [
        context: word/context
        offset: word/offset
    ]
]

get-any: function [word] [] [
    if not word/context [
        error make-struct [
            category: "Script"
            id: "no-context"
            message: "Word has no context"
            args: word
        ]
    ]
    pick-array word/context/values word/offset
]
get: function [word] [value] [
    if not value: get-any word [
        error make-struct [
            category: "Script"
            id: "no-value"
            message: "Word has no value"
            args: word
        ]
    ]
    value
]

parse-word: function [text] [w] [
    if w: parse-word-chars text [
        reduce [
            make word! w
            skip text length-of-array w
        ]
    ]
]
