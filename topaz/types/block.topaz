; Topaz types: BLOCK!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: BLOCK! =========================================================

compare-blocks: function [block1 block2] [pos1 pos2 len] [
    len: length-of block1
    either len = length-of block2 [
        pos1: block1/pos
        pos2: block2/pos
        len: len + pos1
        while [all [pos1 < len equal? block1/values/(pos1) block2/values/(pos2)]] [
            pos1: pos1 + 1
            pos2: pos2 + 1
        ]
        pos1 = len
    ] [
        false
    ]
]

insert-block: function [block value] [] [
    insert-array block/values block/pos value
    insert-array block/newlines block/pos false
    make-block block/type make-struct [
        values: block/values
        pos: block/pos + 1
        newlines: block/newlines
    ]
]

skip-block: function [block amount] [pos len] [
    at-block block block/pos + amount
]

head-block: function [block] [] [
    make-block block/type make-struct [
        values: block/values
        newlines: block/newlines
    ]
]

tail-block: function [block] [] [
    make-block block/type make-struct [
        values: block/values
        pos: length-of-array block/values
        newlines: block/newlines
    ]
]

pick-block: function [block pos] [] [
    pick-array block/values block/pos + pos
]

length-of-block: function [block] [] [
    (length-of-array block/values) - block/pos
]

bind-block: function [words context extend?] [] [
    bind-values words/values words/pos context extend?
    words
]

make-type 'block! [
    make: function [arguments] [] [make-block block! arguments]
    topaz-make: function [value] [] [topaz-make-block block! value]
    insert: :insert-block
    head: :head-block
    tail: :tail-block
    skip: :skip-block
    pick: :pick-block
    length-of: :length-of-block
    mold: function [block indent] [result pos ind] [
        result: "["
        pos: block/pos
        ind: indent + "    "
        if pos < length-of-array block/values [
            result: mold-step2 result block/values block/newlines pos ind "" #"^/"
            pos: pos + 1
            while [pos < length-of-array block/values] [
                result: mold-step2 result block/values block/newlines pos ind #" " #"^/"
                pos: pos + 1
            ]
        ]
        if pick-array block/newlines pos [result: rejoin [result #"^/" indent]]
        result + #"]"
    ]
    do: function [block container] [] [
        reduce [block skip container 1]
    ]
    bind: :bind-block
    compile: function [block container] [] [
        reduce [ast-value block skip container 1]
    ]
    equal?: :default-equal?
    copy: function [value] [] [copy-block block! value]
]
block!/("block!"): make-struct [
    equal?: :compare-blocks
]
block!/("paren!"): make-struct [
    equal?: :compare-blocks
]

make-block: function [type args] [] [
    if not args [args: make-struct []]
    make-struct [
        type: type
        values: any [args/values make-array]
        pos: any [args/pos 0]
        newlines: any [args/newlines make-array]
    ]
]

copy-block: function [type value] [] [
    make-block type make-struct [
        values: apply 'value/values/slice [value/pos]
        newlines: apply 'value/newlines/slice [value/pos]
    ]
]

topaz-make-block: function [type value] [] [
    switch value/type/name [
        "block!"    [copy-block type value]
        "paren!"    [copy-block type value]
        "path!"     [path-to-block type value]
        "lit-path!" [path-to-block type value]
        "set-path!" [path-to-block type value]
        "string!"   [load-raw type value]
    ] [make-block type none]
]

bind-values: function [values pos context extend?] [] [
    while [pos < length-of-array values] [
        poke-array values pos bind pick-array values pos context extend?
        pos: pos + 1
    ]
    none
]
mold-step1: function [result values pos indent sep] [] [
    rejoin [result sep mold-value pick-array values pos indent]
]
mold-step2: function [result values newlines pos indent sep nlsep] [] [
    if pick-array newlines pos [
        sep: nlsep + indent
    ]
    mold-step1 result values pos indent sep
]
new-line: function [block newline?] [] [
    poke-array block/newlines block/pos newline?
]
insert-nl: function [block value newline?] [] [
    block: insert block value
    poke-array block/newlines block/pos - 1 newline?
    block
]
append: function [block value] [] [
    head insert tail block value
]

_foreach-blk: function [block fnc] [pos] [
    pos: block/pos
    while [pos < length-of-array block/values] [
        apply 'fnc [block/values/:pos pos]
        pos: pos + 1
    ]
    none
]
; absolute pos
at-block: function [block pos] [len] [
    case [
        pos > len: length-of-array block/values [pos: len]
        pos < 0 [pos: 0]
    ]
    make-block block/type make-struct [
        values: block/values
        pos: pos
        newlines: block/newlines
    ]
]

parse-block: function [text] [values] [
    if #"[" = first text [
        set [values text] parse-values make block! none skip text 1
        if #"]" <> first text [
            error make-struct [
                category: "Syntax"
                id: "load-error"
                message: "Missing ]"
                stack: text
            ]
        ]
        reduce [values skip text 1]
    ]
]
