Topaz [
    Title: "Topaz types: BLOCK!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: BLOCK! =========================================================

compare-blocks: function [block1 block2] [pos1 pos2 len] [
    len: length-of block1
    either len = length-of block2 [
        pos1: block1/pos
        pos2: block2/pos
        len: len + pos1
        while [all [pos1 < len equal? block1/values/(pos1) block2/values/(pos2)]] [
            pos1: pos1 + 1
            pos2: pos2 + 1
        ]
        pos1 = len
    ] [
        false
    ]
]

insert-block: function [
    "Insert a value at the current position of the series"
    block [any-block!]
    value
    options:
        only: no [logic!] "Insert series as a single value"
        new-line: no [logic!] "Temporary - add new line before value on MOLD"
] [tmp] [
    either all [not only insert-as-block? value] [
        insert-array2 block/values block/pos tmp: copy-array value/values value/pos
        insert-array2 block/newlines block/pos copy-array value/newlines value/pos
        make-block block/type make-struct [
            values: block/values
            pos: block/pos + length-of-array tmp
            newlines: block/newlines
        ]
    ] [
        insert-array block/values block/pos value
        insert-array block/newlines block/pos new-line
        make-block block/type make-struct [
            values: block/values
            pos: block/pos + 1
            newlines: block/newlines
        ]
    ]
]

skip-block: function [block amount] [] [
    at-block block block/pos + amount
]

head-block: function [block] [] [
    make-block block/type make-struct [
        values: block/values
        newlines: block/newlines
    ]
]

tail-block: function [block] [] [
    make-block block/type make-struct [
        values: block/values
        pos: length-of-array block/values
        newlines: block/newlines
    ]
]

pick-block: function [block pos] [] [
    any [pick-array block/values block/pos + pos make none! none]
]

length-of-block: function [block] [] [
    (length-of-array block/values) - block/pos
]

bind-block: function [
    "Bind words to a specified context"
    words [any-block!]
    context [context!]
    options:
        copy: no [logic!] "Bind a (deep) copy of WORDS"
        new: no [logic!] "Add all words to CONTEXT"
] [] [
    if :copy [words: copy-block words/type words]
    bind-values [
        values: words/values
        pos: words/pos
        context: context
        copy: :copy
        new: new
    ]
    words
]

slice-block: function [
    "Copy part of a block"
    start [any-block!]
    end-or-length [any-block! number!]
] [end] [
    either any-block? end-or-length [
        end: end-or-length/pos
    ] [
        end: start/pos + end-or-length/number
    ]
    make-block start/type make-struct [
        values: slice-array start/values start/pos end
        newlines: slice-array start/newlines start/pos end
    ]
]

clear-block: function [
    "Remove all the elements from a block"
    series [any-block!]
] [] [
    clear-array series/values series/pos
    clear-array series/newlines series/pos
    series
]

make-type 'block! [
    make: function [arguments] [] [make-block block! arguments]
    topaz-make: function [value] [] [topaz-make-block block! value]
    insert: :insert-block
    head: :head-block
    tail: :tail-block
    skip: :skip-block
    pick: :pick-block
    length-of: :length-of-block
    mold: function [
        "Return a LOAD-able text representation of a value"
        block
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        mold-values [
            open: "["
            close: either block/newlines/(length-of-array block/values) [
                rejoin ["^/" indent "]"]
            ] ["]"]
            sep: " "
            flat: flat
            nlsep: either flat [" "] [rejoin ["^/" indent either only [""] ["    "]]]
            indent: either flat [""] [rejoin [indent either only [""] ["    "]]]
            limit: limit
            only: only
            values: block/values
            newlines: block/newlines
            pos: block/pos
        ]
    ]
    do: function [block container] [] [
        reduce [block skip container 1]
    ]
    bind: :bind-block
    compile: function [block container] [] [
        reduce [ast-value block skip container 1]
    ]
    equal?: :default-equal?
    copy: function [value] [] [copy-block block! value]
    slice: :slice-block
    get-path: function [block selector] [] [
        if not number? selector [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        pick-block block selector/number
    ]
    set-path: function [block selector set-to] [] [
        if not number? selector [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        block/values/(block/pos + selector/number): set-to
    ]
    clear: :clear-block
]
block!/("block!"): make-struct [
    equal?: :compare-blocks
]
block!/("paren!"): make-struct [
    equal?: :compare-blocks
]

make-block: function [type args] [] [
    if not args [args: make-struct []]
    make-struct [
        type: type
        values: any [args/values make-array]
        pos: any [args/pos 0]
        newlines: any [args/newlines make-array]
    ]
]

copy-block: function [type value] [] [
    make-block type make-struct [
        values: copy-array value/values value/pos
        newlines: copy-array value/newlines value/pos
    ]
]

topaz-make-block: function [type value] [] [
    switch-default value/type/name [
        "block!"    [copy-block type value]
        "paren!"    [copy-block type value]
        "path!"     [path-to-block type value]
        "lit-path!" [path-to-block type value]
        "set-path!" [path-to-block type value]
        "string!"   [load-raw type value]
    ] [make-block type none]
]

bind-values: function [values pos context copy new] [] [
    while [pos < length-of-array values] [
        values/(pos): bind/options [
            words: values/:pos
            context: context
            copy: :copy
            new: new
        ]
        pos: pos + 1
    ]
    none
]
set-new-line: function [block newline?] [] [
    poke-array block/newlines block/pos newline?
]
append: function [block value] [] [
    head insert tail block value
]

_foreach-blk: function [block fnc] [pos] [
    pos: block/pos
    while [pos < length-of-array block/values] [
        apply fnc [block/values/:pos pos]
        pos: pos + 1
    ]
    none
]
; absolute pos
at-block: function [block pos] [len] [
    case [
        pos > len: length-of-array block/values [pos: len]
        pos < 0 [pos: 0]
    ]
    make-block block/type make-struct [
        values: block/values
        pos: pos
        newlines: block/newlines
    ]
]

mold-step: function [
    result
    value
    flat
    limit
    indent
    sep
] [] [
    rejoin [
        result
        sep
        mold/options [
            value: value
            flat: flat
            limit: subtract-limit result limit
            indent: indent
        ]
    ]
]
mold-values: function [
    "Mold an array of values"
    open
    close
    sep
    flat
    nlsep
    indent
    limit
    only
    values
    newlines
    pos
] [result value len] [
    result: either only [""] [open]
    if all [
        within-limit? result limit
        pos < length-of-array values
    ] [
        result: mold-step [
            result: result
            value: values/:pos
            flat: flat
            limit: limit
            indent: indent
            sep: either all [not only newlines/:pos] [nlsep] [""]
        ]
        pos: pos + 1
        while [all [
            within-limit? result limit
            pos < length-of-array values
        ]] [
            result: mold-step [
                result: result
                value: values/:pos
                flat: flat
                limit: limit
                indent: indent
                sep: either newlines/:pos [nlsep] [sep]
            ]
            pos: pos + 1
        ]
    ]
    either pos = length-of-array values [
        result: rejoin [result either only [""] [close]]
    ] [
        result: rejoin [result "..."]
    ]
    limit-string result limit
]

parse-block: function [text] [values] [
    if #"[" = first text [
        set [values text] parse-values make block! none skip text 1
        if #"]" <> first text [
            error make-struct [
                category: "Syntax"
                id: "load-error"
                message: "Missing ]"
                stack: text
            ]
        ]
        reduce [values skip text 1]
    ]
]
