; Topaz types: LIT-PATH!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: LIT-PATH! ======================================================

lit-path!: make-type "lit-path!" [
    make: function [arguments] [] [
        make-struct [
            type: lit-path!
            values: make-array
            pos: 0
        ]
    ]
    topaz-make: function [ignored] [] [
        apply 'lit-path!/make [none]
    ]
    insert: function [block value] [] [
        insert-array block/values block/pos value
        make-struct [
            type: lit-path!
            values: block/values
            pos: block/pos + 1
        ]
    ]
    head: function [block] [] [
        make-struct [
            type: lit-path!
            values: block/values
            pos: 0
        ]
    ]
    tail: function [block] [] [
        make-struct [
            type: lit-path!
            values: block/values
            pos: length-of-array block/values
        ]
    ]
    skip: function [block amount] [] [
        make-struct [
            type: lit-path!
            values: block/values
            pos: block/pos + amount
        ]
    ]
    pick: function [block pos] [] [
        pick-array block/values block/pos + pos
    ]
    length-of: function [block] [] [
        (length-of-array block/values) - block/pos
    ]
    mold: function [block indent] [result pos] [
        result: "'"
        pos: block/pos
        if pos < length-of-array block/values [
            result: mold-step1 result block/values pos indent ""
            pos: pos + 1
            while [pos < length-of-array block/values] [
                result: mold-step1 result block/values pos indent #"/"
                pos: pos + 1
            ]
        ]
        result
    ]
    do: function [path block] [] [
        path: make-struct [
            type: path!
            values: path/values
            pos: path/pos
        ]
        reduce [path skip block 1]
    ]
    bind: function [path context extend?] [] [
        bind-values path/values 0 context extend?
        path
    ]
    compile: function [path block] [] [
        reduce [
            ast-value make-struct [
                type: path!
                values: path/values
                pos: path/pos
            ]
            skip block 1
        ]
    ]
    equal?: function [path value] [] [false]
    copy: function [value] [] [
        make-struct [
            type: lit-path!
            values: apply 'value/values/slice [value/pos]
            pos: 0
        ]
    ]
]
lit-path!/("path!"): make-struct [
    equal?: :compare-blocks
]
lit-path!/("set-path!"): make-struct [
    equal?: :compare-blocks
]
lit-path!/("lit-path!"): make-struct [
    equal?: :compare-blocks
]

parse-lit-path: function [text] [path value] [
    if all [#"'" = first text  value: parse-word-chars skip text 1  #"/" = pick text 1 + length-of-array value] [
        path: make lit-path! none
        path: insert path make word! value
        text: skip text 1 + length-of-array value
        while [all [not empty? text  #"/" = first text]] [
            set [value text] parse-path-element skip text 1
            either value [
                path: insert path value
            ] [
                error "Syntax" "Parse error" to-js-string text
            ]
        ]
        reduce [head path text]
    ]
]
