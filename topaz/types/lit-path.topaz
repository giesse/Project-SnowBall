; Topaz types: LIT-PATH!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: LIT-PATH! ======================================================

make-type 'lit-path! [
    make: function [arguments] [] [make-path lit-path! arguments]
    topaz-make: function [value] [] [topaz-make-path lit-path! value]
    insert: :insert-path
    head: :head-path
    tail: :tail-path
    skip: :skip-path
    pick: :pick-block
    length-of: :length-of-block
    mold: function [
        "Return a LOAD-able text representation of a value"
        block
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        mold-values [
            open: "'"
            close: ""
            sep: "/"
            flat: true
            nlsep: "/"
            indent: ""
            limit: limit
            only: false
            values: block/values
            newlines: make-array
            pos: block/pos
        ]
    ]
    do: function [path block] [] [
        reduce [copy-path path! path skip block 1]
    ]
    bind: :bind-block
    compile: function [path block] [] [
        reduce [
            ast-value make-struct [
                type: path!
                values: path/values
                pos: path/pos
            ]
            skip block 1
        ]
    ]
    equal?: :default-equal?
    copy: function [value] [] [copy-path lit-path! value]
]
lit-path!/("path!"): make-struct [
    equal?: :compare-blocks
]
lit-path!/("set-path!"): make-struct [
    equal?: :compare-blocks
]
lit-path!/("lit-path!"): make-struct [
    equal?: :compare-blocks
]

parse-lit-path: function [text] [path value] [
    if all [#"'" = first text  value: parse-word-chars skip text 1  #"/" = pick text 1 + length-of-array value] [
        path: make lit-path! none
        path: insert path make word! value
        text: skip text 1 + length-of-array value
        while [all [not empty? text  #"/" = first text]] [
            set [value text] parse-path-element skip text 1
            either value [
                path: insert/only path value
            ] [
                error make-struct [
                    category: "Syntax"
                    id: "load-error"
                    message: "Parse error"
                    stack: text
                ]
            ]
        ]
        reduce [head path text]
    ]
]
