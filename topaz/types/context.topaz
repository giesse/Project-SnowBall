Topaz [
    Title: "Topaz types: CONTEXT!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: CONTEXT! =======================================================

make-type 'context! [
    make: function [arguments] [ctx] [
        if not arguments [arguments: make-struct []]
        ctx: make-struct [
            type: context!
            words: any [arguments/words make-array]
            values: any [arguments/values make-array]
            compiler-values: make-array
        ]
        set-in-context ctx make word! "this-context" ctx
        ctx
    ]
    topaz-make: function [code] [ctx] [
        switch-default code/type/name [
            "block!" [
                ctx: make context! none
                bind/new collect-set-words make block! none code ctx
                do bind code ctx
                ctx
            ]
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for MAKE CONTEXT!"
                args: code
            ]
        ]
    ]
    mold: function [
        "Return a LOAD-able text representation of a value"
        context
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        mold-words-and-values [
            open: "context ["
            close: either flat ["]"] [rejoin ["^/" indent "]"]]
            limit: limit
            words: copy-array context/words 1
            get-word-f: function [word] [] [context/values/(get-word-offset context word)]
            sep: either flat [" "] [rejoin ["^/" indent "    "]]
            flat: flat
            indent: rejoin [indent "    "]
        ]
    ]
    do: function [context block] [] [
        reduce [context skip block 1]
    ]
    bind: :default-bind
    compile: function [context block] [] [
        reduce [ast-value context skip block 1]
    ]
    get-path: function [context selector] [offset] [
        if any [not any-word? selector  0 > offset: get-word-offset context selector/word] [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        pick-array context/values offset
    ]
    set-path: function [context selector set-to] [offset] [
        if any [not any-word? selector  0 > offset: get-word-offset context selector/word] [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        poke-array context/values offset set-to
    ]
    equal?: :default-equal?
    in?: function [ctx word] [offset] [
        if not any-word? word [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for IN? CONTEXT!"
                args: word
            ]
        ]
        either 0 > offset: get-word-offset ctx word/word [
            make none! none
        ] [
            make-word word/type word/word make-struct [
                context: ctx
                offset: offset
            ]
        ]
    ]
]

get-word-offset: function [context word] [] [
    apply context/words/index-of [word]
]

add-word: function [context word value] [l] [
    l: length-of-array context/words
    poke-array context/words l word/word
    poke-array context/values l value
    l
]

bind-word: function [context word add?] [offset] [
    offset: get-word-offset context word/word
    if all [add? offset < 0] [
        offset: add-word context word none
    ]
    either offset >= 0 [
        make-word word/type word/word make-struct [
            context: context
            offset: offset
        ]
    ] [
        word
    ]
]

set-in-context: function [context word set-to] [offset] [
    either 0 > offset: get-word-offset context word/word [
        add-word context word set-to
    ] [
        poke-array context/values offset set-to
    ]
]

mold-words-and-values: function [
    open
    close
    limit
    words
    get-word-f
    sep
    flat
    indent
] [result i value] [
    result: open
    i: 0
    while [all [
        within-limit? result limit
        i < length-of-array words
    ]] [
        result: rejoin [
            result sep
            words/:i ": "
        ]
        if within-limit? result limit [
            value: apply get-word-f [words/:i]
            result: rejoin [
                result
                mold/options [
                    value: either word? value [make lit-word! value/word] [value]
                    flat: flat
                    limit: subtract-limit result limit
                    indent: indent
                ]
            ]
        ]
        i: i + 1
    ]
    if within-limit? result limit [
        result: rejoin [result close]
    ]
    limit-string result limit
]

context-to-object: function [context] [words map] [
    map: make-struct []
    foreach [word pos] words: copy-array context/words 1 [
        map/(word): context/values/(pos + 1)
    ]
    make object! make-struct [
        words: words
        map: :map
    ]
]

get-compiler-value: function [word] [] [
    either word/context [
        any [word/context/compiler-values/(word/offset) make none! none]
    ] [
        make none! none
    ]
]
set-compiler-value: function [word value] [] [
    if not word/context [
        error make-struct [
            category: "Script"
            id: "no-context"
            message: "Word has no context"
            args: word
        ]
    ]
    word/context/compiler-values/(word/offset): value
    value
]
