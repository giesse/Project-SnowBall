; Topaz types: CONTEXT!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: CONTEXT! =======================================================

context!: make-type "context!" [
    make: function [arguments] [] [
        if not arguments [arguments: make-struct []]
        make-struct [
            type: context!
            words: any [arguments/words make-array]
            values: any [arguments/values make-array]
            stack: any [arguments/stack make-array]
        ]
    ]
    topaz-make: function [code] [ctx] [
        switch code/type/name [
            "block!" [
                ctx: make context! none
                bind collect-set-words make block! none code false ctx true
                do bind code ctx false
                ctx
            ]
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for MAKE CONTEXT!"
                args: code
            ]
        ]
    ]
    mold: function [context indent] [block i] [
        block: make block! none
        i: 0
        while [i < length-of-array context/words] [
            block: insert insert-nl block make set-word! pick-array context/words i true pick-array context/values i
            i: i + 1
        ]
        new-line block true
        rejoin ["context " mold-value head block indent]
    ]
    do: function [context block] [] [
        reduce [context skip block 1]
    ]
    bind: function [value context extend?] [] [value]
    compile: function [context block] [] [
        reduce [ast-value context skip block 1]
    ]
    get-path: function [context selector] [offset] [
        if any [not any-word? selector  0 > offset: get-word-offset context selector/word] [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        pick-array context/values offset
    ]
    set-path: function [context selector set-to] [offset] [
        if any [not any-word? selector  0 > offset: get-word-offset context selector/word] [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "Invalid path value"
                args: selector
            ]
        ]
        poke-array context/values offset set-to
    ]
    equal?: :default-equal?
    in?: function [ctx word] [offset] [
        if not any-word? word [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for IN? CONTEXT!"
                args: word
            ]
        ]
        either 0 > offset: get-word-offset ctx word/word [
            make none! none
        ] [
            make-word word/type word/word make-struct [
                context: ctx
                offset: offset
            ]
        ]
    ]
]

get-word-offset: function [context word] [] [
    apply 'context/words/index-of [word]
]
clone-values: function [context] [] [
    clone-array pick-array context/stack 0
]
push-context: function [context] [] [
    poke-array context/stack length-of-array context/stack context/values
]
pop-context: function [context] [] [
    context/values: pop-array context/stack
]

add-word: function [context word value] [l] [
    l: length-of-array context/words
    poke-array context/words l word/word
    poke-array context/values l value
    l
]

bind-word: function [context word add?] [offset] [
    offset: get-word-offset context word/word
    if all [add? offset < 0] [
        offset: add-word context word none
    ]
    either offset >= 0 [
        make-word word/type word/word make-struct [
            context: context
            offset: offset
        ]
    ] [
        word
    ]
]
