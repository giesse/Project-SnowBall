Topaz [
    Title: "Topaz types: CHAR!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: CHAR! ==========================================================

make-type 'char! [
    make: function [arguments] [] [
        make-struct [
            type: char!
            string: arguments
        ]
    ]
    topaz-make: function [value] [] [
        switch-default value/type/name [
            "number!" [
                apply char!/make [to-char value/number]
            ]
            "char!" [
                apply char!/make [value/string]
            ]
            "none!" [
                apply char!/make [to-char 0]
            ]
        ] [
            error make-struct [
                category: "Script"
                id: "invalid-argument"
                message: "Invalid argument for MAKE CHAR!"
                args: value
            ]
        ]
    ]
    mold: function [
        "Return a LOAD-able text representation of a value"
        char
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        limit-string rejoin ["#^"" escape char/string "^""] limit
    ]
    do: function [char block] [] [
        reduce [char skip block 1]
    ]
    bind: :default-bind
    compile: function [char block] [] [
        reduce [ast-value char skip block 1]
    ]
    equal?: :default-equal?
    copy: function [value] [] [value]
]
char!/("char!"): make-struct [
    equal?: function [char1 char2] [] [char1/string = char2/string]
]

parse-char: function [text] [ch] [
    ch: exec-re to-js-string text regexp "^^#^"(\^^?.|\^^\([0-9A-Fa-f]+\))^"" ""
    if ch [
        reduce [
            make char! unescape pick-array ch 1
            skip text length-of-array pick-array ch 0
        ]
    ]
]
