Topaz [
    Title: "Topaz types: GET-WORD!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: GET-WORD! ======================================================

make-type 'get-word! [
    make: function [arguments] [] [make-word get-word! arguments none]
    topaz-make: function [value] [] [topaz-make-word get-word! value]
    mold: function [
        "Return a LOAD-able text representation of a value"
        word
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [limit-string ":" + word/word limit]
    do: function [word block] [] [
        reduce [get word skip block 1]
    ]
    bind: function [
        "Bind words to a specified context"
        word
        context [context!]
        options:
            copy: no [logic!] "Bind a (deep) copy of WORDS"
            new: no [logic!] "Add all words to CONTEXT"
    ] [] [bind-word context word new]
    compile: function [word block] [] [
        reduce [ast-get word skip block 1]
    ]
    equal?: :default-equal?
]
get-word!/("word!"): make-struct [
    equal?: :compare-words
]
get-word!/("get-word!"): make-struct [
    equal?: :compare-words
]
get-word!/("set-word!"): make-struct [
    equal?: :compare-words
]
get-word!/("lit-word!"): make-struct [
    equal?: :compare-words
]

parse-get-word: function [text] [w] [
    if all [#":" = first text  w: parse-word-chars skip text 1] [
        reduce [
            make get-word! w
            skip text 1 + length-of-array w
        ]
    ]
]
