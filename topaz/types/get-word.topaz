; Topaz types: GET-WORD!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: GET-WORD! ======================================================

get-word!: make-type "get-word!"
get-word!/make: function [arguments] [] [
    make-struct [
        type: get-word!
        word: arguments
        context: none
        offset: none
    ]
]
get-word!/topaz-make: function [string] [] [
    apply 'get-word!/make [string/string]
]
get-word!/mold: function [word indent] [] [
    ":" + word/word
]
get-word!/do: function [word block] [] [
    if not word: get word [
        error "Script" "Word has no value" mold-value block ""
    ]
    reduce [word skip block 1]
]
get-word!/bind: function [word context extend?] [] [
    bind-word context make-struct [
        type: get-word!
        word: word/word
        context: word/context
        offset: word/offset
    ] extend?
]
get-word!/compile: function [word block] [] [
    reduce [ast-get word skip block 1]
]
get-word!/equal?: function [word value] [] [false]
get-word!/("word!"): make-struct []
get-word!/("get-word!"): make-struct []
get-word!/("set-word!"): make-struct []
get-word!/("lit-word!"): make-struct []
get-word!/("word!")/equal?:
get-word!/("get-word!")/equal?:
get-word!/("set-word!")/equal?:
get-word!/("lit-word!")/equal?: function [word1 word2] [] [word1/word = word2/word]

parse-get-word: function [text] [w] [
    if all [#":" = first text  w: parse-word-chars skip text 1] [
        reduce [
            make get-word! w
            skip text 1 + length-of-array w
        ]
    ]
]
