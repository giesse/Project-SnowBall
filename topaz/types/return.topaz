; Topaz types: RETURN!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: RETURN! ========================================================

; RETURN! values are special native functions which throw a RETURN-VALUE!

make-type 'return! [
    make: function [arguments] [fnc] [
        fnc: make-struct [
            type: return!
            mode: "fixed" ; default invocation syntax
            args-list: make-array ; list of all arguments
            mandatory: 0 ; number of mandatory arguments
            args: make-struct [] ; map of all arguments
            flags: make-array ; active flags
            context: make context! none ; simplifies code, not optimal
            spec: arguments/spec
            func: arguments/func
        ]
        parse-function-spec fnc
        if 3 < fnc/mandatory [fnc/mode: "named"]
        fnc
    ]
    topaz-make: function [ignored] [] [
        error make-struct [
            category: "Script"
            id: "invalid-argument"
            message: "Cannot MAKE RETURN!"
        ]
    ]
    mold: function [
        "Return a LOAD-able text representation of a value"
        func
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        limit-string rejoin [
            "#[return " mold/options [value: func/spec flat: flat limit: limit indent: indent] "]"
        ] limit
    ]
    do: function [func block] [value] [
        push-context func/context
        block: collect-function-arguments func block
        call-return func
    ]
    bind: :default-bind
    compile: function [func block] [args] [
        error make-struct [
            category: "Internal"
            id: "not-implemented"
            message: "Cannot compile RETURN! values"
        ]
    ]
    equal?: :default-equal?
    get-path: :function-get-path
]

call-return: function [func] [] [
    case [
        func/mandatory = 0 [
            value: make none! none
        ]
        func/mandatory = 1 [
            value: func/context/values/1
        ]
        'else [
            value: context-to-object func/context
        ]
    ]
    ; it's ok because of the THROW
    pop-context func/context
    throw make return-value! make-struct [value: value func: func/func]
]
