; Topaz types: SET-PATH!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: SET-PATH! ======================================================

set-path!: make-type "set-path!" [
    make: function [arguments] [] [make-path set-path! arguments]
    topaz-make: function [value] [] [topaz-make-path set-path! value]
    insert: :insert-path
    head: :head-path
    tail: :tail-path
    skip: :skip-path
    pick: :pick-block
    length-of: :length-of-block
    mold: function [block indent] [result pos] [
        result: ""
        pos: block/pos
        if pos < length-of-array block/values [
            result: mold-step1 result block/values pos indent ""
            pos: pos + 1
            while [pos < length-of-array block/values] [
                result: mold-step1 result block/values pos indent #"/"
                pos: pos + 1
            ]
        ]
        result + #":"
    ]
    do: function [path block] [value set-to] [
        if 2 > length-of path [
            error make-struct [
                category: "Script"
                id: "invalid-path"
                message: "SET-PATH! with less than two values"
            ]
        ]
        value: get first path
        path: skip path 1
        while [1 < length-of path] [
            value: get-path value first path
            path: skip path 1
        ]
        block: skip block 1
        if empty? block [
            error make-struct [
                category: "Script"
                id: "missing-argument"
                message: "SET-PATH! needs a value"
            ]
        ]
        set [set-to block] do-step first block block
        set-path value first path set-to
        reduce [set-to block]
    ]
    bind: :bind-block
    compile: function [path block] [expr set-to] [
        if 2 > length-of path [
            error make-struct [
                category: "Compilation"
                id: "invalid-path"
                message: "SET-PATH! with less than two values"
            ]
        ]
        expr: ast-get first path
        path: skip path 1
        while [1 < length-of path] [
            expr: ast-get-path expr first path
            path: skip path 1
        ]
        block: skip block 1
        if empty? block [
            error make-struct [
                category: "Compilation"
                id: "missing-argument"
                message: "SET-PATH! needs a value"
            ]
        ]
        set [set-to block] compile-step block
        reduce [ast-set-path expr first path set-to block]
    ]
    equal?: :default-equal?
    copy: function [value] [] [copy-path set-path! value]
]
set-path!/("path!"): make-struct [
    equal?: :compare-blocks
]
set-path!/("set-path!"): make-struct [
    equal?: :compare-blocks
]
set-path!/("lit-path!"): make-struct [
    equal?: :compare-blocks
]

parse-set-path: function [text] [path value] [
    if all [value: parse-word-chars text  #"/" = pick text length-of-array value] [
        path: make set-path! none
        path: insert path make word! value
        text: skip text length-of-array value
        while [all [not empty? text  #"/" = first text]] [
            set [value text] parse-path-element skip text 1
            either value [
                path: insert path value
            ] [
                error make-struct [
                    category: "Syntax"
                    id: "load-error"
                    message: "Parse error"
                    stack: text
                ]
            ]
        ]
        if all [not empty? text  #":" = first text] [
            reduce [head path skip text 1]
        ]
    ]
]
