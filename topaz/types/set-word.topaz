; Topaz types: SET-WORD!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: SET-WORD! ======================================================

make-type 'set-word! [
    make: function [arguments] [] [make-word set-word! arguments none]
    topaz-make: function [value] [] [topaz-make-word set-word! value]
    mold: function [
        "Return a LOAD-able text representation of a value"
        word
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [limit-string word/word + #":" limit]
    do: function [word block] [set-to] [
        block: skip block 1
        if empty? block [
            error make-struct [
                category: "Script"
                id: "missing-argument"
                message: "SET-WORD! needs a value"
            ]
        ]
        set [set-to block] do-step first block block
        set-word word set-to
        reduce [set-to block]
    ]
    bind: function [
        "Bind words to a specified context"
        word
        context [context!]
        options:
            copy: no [logic!] "Bind a (deep) copy of WORDS"
            new: no [logic!] "Add all words to CONTEXT"
    ] [] [bind-word context word new]
    compile: function [word block] [set-to] [
        block: skip block 1
        if empty? block [
            error make-struct [
                category: "Compilation"
                id: "missing-argument"
                message: "SET-WORD! needs a value"
            ]
        ]
        set [set-to block] compile-step block
        reduce [ast-set word set-to block]
    ]
    equal?: :default-equal?
]
set-word!/("word!"): make-struct [
    equal?: :compare-words
]
set-word!/("get-word!"): make-struct [
    equal?: :compare-words
]
set-word!/("set-word!"): make-struct [
    equal?: :compare-words
]
set-word!/("lit-word!"): make-struct [
    equal?: :compare-words
]

set-word: function [word value] [] [
    if not word/context [
        error make-struct [
            category: "Script"
            id: "no-context"
            message: "Word has no context"
            args: word
        ]
    ]
    poke-array word/context/values word/offset value
    value
]

parse-set-word: function [text] [w] [
    if all [w: parse-word-chars text  #":" = pick text length-of-array w] [
        reduce [
            make set-word! w
            skip text 1 + length-of-array w
        ]
    ]
]
