Topaz [
    Title: "Topaz types: PAREN!"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: PAREN! =========================================================

make-type 'paren! [
    make: function [arguments] [] [make-block paren! arguments]
    topaz-make: function [value] [] [topaz-make-block paren! value]
    insert: :insert-block
    head: :head-block
    tail: :tail-block
    skip: :skip-block
    pick: :pick-block
    length-of: :length-of-block
    mold: function [
        "Return a LOAD-able text representation of a value"
        block
        options:
            only: no [logic!] "Don't generate outer [ ] for block! values"
            flat: no [logic!] "Produce a single text line"
            limit [number! none!] "Don't return a string longer than LIMIT characters"
            indent: "" [string!] "Add this string after each new line (ignored if flat)"
    ] [] [
        mold-values [
            open: "("
            close: either block/newlines/(length-of-array block/values) [rejoin ["^/" indent ")"]] [")"]
            sep: " "
            flat: flat
            nlsep: either flat [" "] [rejoin ["^/" indent "    "]]
            indent: either flat [""] [rejoin [indent "    "]]
            limit: limit
            only: false
            values: block/values
            newlines: block/newlines
            pos: block/pos
        ]
    ]
    do: function [paren block] [] [
        reduce [do paren skip block 1]
    ]
    bind: :bind-block
    compile: function [paren block] [] [
        reduce [ast-paren compile paren skip block 1]
    ]
    equal?: :default-equal?
    copy: function [value] [] [copy-block paren! value]
    slice: :slice-block
]
paren!/("paren!"): make-struct [
    equal?: :compare-blocks
]
paren!/("block!"): make-struct [
    equal?: :compare-blocks
]

parse-paren: function [text] [values] [
    if #"(" = first text [
        set [values text] parse-values make paren! none skip text 1
        if #")" <> first text [
            error make-struct [
                category: "Syntax"
                id: "load-error"
                message: "Missing )"
                stack: text
            ]
        ]
        reduce [values skip text 1]
    ]
]
