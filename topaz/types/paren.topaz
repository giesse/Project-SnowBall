; Topaz types: PAREN!
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== TYPES: PAREN! =========================================================

make-type 'paren! [
    make: function [arguments] [] [make-block paren! arguments]
    topaz-make: function [value] [] [topaz-make-block paren! value]
    insert: :insert-block
    head: :head-block
    tail: :tail-block
    skip: :skip-block
    pick: :pick-block
    length-of: :length-of-block
    mold: function [block indent] [result pos ind] [
        result: "("
        pos: block/pos
        ind: indent + "    "
        if pos < length-of-array block/values [
            result: mold-step2 result block/values block/newlines pos ind "" #"^/"
            pos: pos + 1
            while [pos < length-of-array block/values] [
                result: mold-step2 result block/values block/newlines pos ind #" " #"^/"
                pos: pos + 1
            ]
        ]
        if pick-array block/newlines pos [result: rejoin [result #"^/" indent]]
        result + #")"
    ]
    do: function [paren block] [] [
        reduce [do paren skip block 1]
    ]
    bind: :bind-block
    compile: function [paren block] [] [
        reduce [ast-paren compile paren skip block 1]
    ]
    equal?: :default-equal?
    copy: function [value] [] [copy-block paren! value]
]
paren!/("paren!"): make-struct [
    equal?: :compare-blocks
]
paren!/("block!"): make-struct [
    equal?: :compare-blocks
]

parse-paren: function [text] [values] [
    if #"(" = first text [
        set [values text] parse-values make paren! none skip text 1
        if #")" <> first text [
            error make-struct [
                category: "Syntax"
                id: "load-error"
                message: "Missing )"
                stack: text
            ]
        ]
        reduce [values skip text 1]
    ]
]
