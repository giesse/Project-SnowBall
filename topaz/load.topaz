Topaz [
    Title: "Topaz parser and LOAD native"
    Author: "Gabriele Santilli"
    Copyright: 2011
    Type: Fake-Topaz
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; ===== TYPES: PARSERS ========================================================

skip-spaces: function [text] [t newline?] [
    t: exec-re to-js-string text regexp "^^(\s|;.*\n)+" ""
    newline?: false
    if t [
        t: pick-array t 0
        newline?: test-re t regexp "\n" ""
        text: skip text length-of-array t
    ]
    reduce [text newline?]
]

parse-word-chars: function [text] [t] [
    if t: exec-re to-js-string text regexp "^^[!&*+\-.<=>?A-Z^^_`a-z|~-ÿ]['!&*+\-.0-9<=>?A-Z^^_`a-z|~-ÿ]*" "" [
        pick-array t 0
    ]
]

parse-path-element: function [text] [] [
    any [
        parse-number   text
        parse-get-word text
        parse-word     text
        parse-string   text
        parse-file     text
        parse-block    text
        parse-paren    text
        parse-char     text
    ]
]

parse-value: function [text] [] [
    any [
        parse-number   text
        parse-set-word text
        parse-set-path text
        parse-path     text
        parse-lit-path text
        parse-word     text
        parse-lit-word text
        parse-get-word text
        parse-string   text
        parse-file     text
        parse-block    text
        parse-paren    text
        parse-char     text
    ]
]

parse-values: function [values text] [value newline?] [
    set [text newline?] skip-spaces text
    while [all [not empty? text  #"]" <> first text  #")" <> first text]] [
        set [value text] parse-value text
        either value [
            values: insert/options [
                series: values
                value: value
                only
                new-line: newline?
            ]
            set [text newline?] skip-spaces text
        ] [
            error make-struct [
                category: "Syntax"
                id: "load-error"
                message: "Parse error"
                stack: text
            ]
        ]
    ]
    set-new-line values newline?
    reduce [head values text]
]

; ===== NATIVES ===============================================================

system-words: make context! none

load-raw: function [type text] [values] [
    set [values text] parse-values make type none text
    if not empty? text [
        error make-struct [
            category: "Syntax"
            id: "load-error"
            message: "Parse error"
            stack: text
        ]
    ]
    values
]

load: function [
    "Load the string into a Topaz value"
    text [string!] "Text representation of a Topaz value"
    options:
        all: no [logic!] "Always return a BLOCK! value"
] [values] [
    values: load-raw block! text
    bind/new values system-words
    ; the compiler does not bind (yet), so ALL vs. :ALL works
    either all [not :all 1 = length-of values] [
        first values
    ] [
        values
    ]
]
