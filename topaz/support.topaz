; Topaz support functions
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== SUPPORT FUNCTIONS =====================================================

prin: function [text] [] [
    apply sys/print [text]
    text
]
print: function [text] [] [
    apply sys/print [text + "^/"]
    text
]

js-probe: function [value] [] [
    print apply sys/inspect [value]
    value
]

length-of-array: function [arr] [] [
    arr/length
]

insert-array: function [arr pos value] [] [
    apply arr/splice [pos 0 value]
]

slice-array: function [arr begin end] [] [
    apply arr/slice [begin end]
]

copy-array: function [arr begin] [] [
    apply arr/slice [begin]
]

concat: function [arr1 arr2] [] [
    apply arr1/concat [arr2]
]

insert-array2: function [arr1 pos arr2] [] [
    apply arr1/splice/apply [arr1 concat reduce [pos 0] arr2]
]

concat3: function [arr1 arr2 arr3] [] [
    apply arr1/concat [arr2 arr3]
]

name-to-js: function [name] [] [
    switch-default name [
        "arguments" ["_arguments"]
        "do"        ["_do"]
        "json"      ["JSON"]
        "case"      ["_case"]
        "try"       ["_try"]
        "throw"     ["_throw"]
        "function"  ["_function"]
        "if"        ["_if"]
        "while"     ["_while"]
        "switch"    ["_switch"]
        "true"      ["_true"]
        "false"     ["_false"]
        "catch"     ["_catch"]
        "new"       ["_new"]
    ] [
        name: apply name/replace [
            regexp "-(.)" "g"
            function [match chr] [] [
                apply chr/to-upper-case []
            ]
        ]
        name: apply name/replace [
            regexp "^^(.)(.*)\?$" ""
            function [match chr rest] [] [
                rejoin ["is" apply chr/to-upper-case [] rest]
            ]
        ]
        apply name/replace ["!" "_type"]
    ]
]

collect-set-words: function [
    "Collect all SET-WORD!s in the block"
    setwords [any-block!] "SET-WORD!s are appended here"
    block [any-block!]
    options:
        deep: no [logic!] "Recurse into sub-blocks"
] [value] [
    while [not empty? block] [
        value: first block
        switch value/type/name [
            "set-word!" [
                append setwords value
            ]
            "block!" [if deep [collect-set-words/deep setwords value]]
            "paren!" [if deep [collect-set-words/deep setwords value]]
        ]
        block: skip block 1
    ]
    setwords
]

clone-array: function [arr] [] [
    apply arr/concat []
]

pop-array: function [arr] [] [
    apply arr/pop []
]

append-array: function [arr value] [] [
    apply arr/push [value]
]

exec-re: function [str re] [] [
    apply re/exec [str]
]

test-re: function [str re] [] [
    apply re/test [str]
]

empty-array?: function [array] [] [
    0 = length-of-array array
]

true?: function [value] [] [
    switch-default value/type/name [
        "none!" [false]
        "logic!" [value/value]
    ] [
        true
    ]
]

default-equal?: function [value1 value2] [] [false]

default-bind: function [
    "Bind words to a specified context"
    words
    context [context!]
    options:
        copy: no [logic!] "Bind a (deep) copy of WORDS"
        new: no [logic!] "Add all words to CONTEXT"
] [] [words]

_foreach: function [arr fnc] [] [
    apply arr/for-each [fnc]
]
macro 'foreach [word arr body] [
    word: word/value
    if not system/words/block? word [word: system/words/reduce [word]]
    system/words/make system/words/expression! compose/only [
        _foreach arr function (word) [] body
    ]
]
; _foreach-blk defined in types/block.topaz
macro 'foreach-blk [word block body] [
    word: word/value
    if not system/words/block? word [word: system/words/reduce [word]]
    system/words/make system/words/expression! compose/only [
        _foreach-blk block function (word) [] body
    ]
]

handle-js-error: function [value] [] [
    either js-error? value [
        make error! make-struct [
            category: "Internal"
            id: "js-error"
            message: "Javascript error"
            args: make string! value/message
            stack: if value/stack [make string! value/stack]
        ]
    ] [
        value
    ]
]

; cheap way to clone objects
clone-object: function [obj] [] [
    make-struct [__proto__: obj]
]

macro 'topaz-value [value] [
    value: system/words/mold value/value
    system/words/make system/words/expression! compose [
        load make string! (value)
    ]
]

limit-string: function [string limit] [] [
    case [
        any [
            limit = none
            limit >= length-of-array string
        ] [
            string
        ]
        limit > 3 [
            rejoin [slice-array string 0 limit - 3 "..."]
        ]
        'else [
            slice-array "..." 0 limit
        ]
    ]
]

within-limit?: function [string limit] [] [
    any [
        limit = none
        limit > length-of-array string
    ]
]

subtract-limit: function [string limit] [] [
    either limit = none [none] [
        limit - length-of-array string
    ]
]
