; Topaz Interpreter Basic Tests

; Prove it's able to load and mold itself without erroring out
run-test [length-of mold load read "topaz/interpreter.topaz"]

run-test ['word [1 2 3] (1 2 3) 'lit/path "string" #"C"]
run-test [a: 1 a]
run-test [make datatype! 0]
run-test [insert [] 1]
run-test [head []]
run-test [pick [1 2 3] 1]
run-test [length-of [1 2 3]]
run-test [empty? []]
run-test [skip [1 2 3] 1]
run-test [skip [1 2 3] 2]
run-test [head skip [1 2 3] 2]
run-test [mold [1 2 3]]
run-test [mold 'a/path]
run-test [mold 'a-word]
run-test [do [pick [1 2 3] 1]]
run-test [get 'datatype!]
run-test [get 'make]
run-test [get 'insert]
run-test [get 'block!]
run-test [get 'func]
run-test [tail [1 2 3]]
run-test [probe [1 2 3]]
run-test [make block! 0]
run-test [make paren! 0]
run-test [make path! 0]
run-test [first [1 2 3]]
run-test [make set-path! 0]
run-test [make lit-path! 0]
run-test [make string! 0]
run-test [make char! 64]
run-test [make number! 64]
run-test [make word! "bla"]
run-test [make set-word! "bla"]
run-test [make lit-word! "bla"]
run-test [make function! [[a b] [a]]]
run-test [append [1 2 3] 4]
run-test [make native! 0]
run-test [load "1 2 3"]
run-test [reduce [1 2 3]]
run-test [reduce [get 'datatype! get 'make get 'func append [1 2 3] 4]]
run-test [f: func [a b c] [reduce [a b c]]]
run-test [f 1 2 3]
run-test [f 'a 'b 'c]
run-test [f f 1 2 3 f 4 5 6 f 7 8 9]
run-test [load "1 2 3 ; 4 5 6^/ 7 8 9"]
