; Compile topaz/interpreter.topaz to topaz/interpreter.js

interpreter: load read "topaz/interpreter.topaz"

app: func [code] [
    foreach 'value code [
        insert tail interpreter value
    ]
]

app [
    sys: apply 'require ["sys"]
    fs: apply 'require ["fs"]
]
app reduce [
    make set-word! "init-code" read "topaz/init.topaz"
]
app [
    try [
        do load make string! init-code true
    ] 'e [
        print "FATAL: error during initialization^/"
        print e + "^/"
        apply 'process/exit [1]
    ]

    either 2 < length-of-array process/argv [
        try [
            do load read pick-array process/argv 2 true
        ] 'e [
            print e + "^/"
        ]
    ] [
        print "Topaz Interpreter - (C) 2011 Gabriele Santilli - MIT License^/"
        stdin: apply 'process/open-stdin []
        apply 'stdin/set-encoding ["utf8"]
        apply 'stdin/add-listener [
            "data"
            function [chunk] [res] [
                either chunk = "quit^/" [
                    apply 'stdin/destroy []
                ] [
                    try [
                        chunk: do load make string! chunk true
                        print "== " print mold-value chunk "== "
                        print "^/>> "
                    ] 'e [
                        print e + "^/>> "
                    ]
                ]
            ]
        ]
        print ">> "
    ]
]

funcall-macro: func [name spec] [
    make function! reduce [
        spec
        compose [
            make expression! [
                apply (to-lit-word name) (spec)
            ]
        ]
    ]
]

; define function call macros, make all set-words local, mask some interpreter functions
locals: parse interpreter [
    collect any [
        keep name: set-word! [
            'function keep ('funcall-macro) keep (to-lit-word name) keep block! block! block!
            |
            keep (none)
        ]
        |
        skip
    ]
]
foreach 'w [context: func:] [append locals w]
append locals none
locals: context locals
bind interpreter locals
bind interpreter compiler-keywords

write "topaz/interpreter.js" compile interpreter
