; Topaz compiler
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== COMPILER ABSTRACT SYNTAX TREE =========================================

to-js: function [node context] [] [
    apply 'node/to-js [node context]
]
to-js-common: function [js-text context] [] [
    switch context [
        "return" [
            rejoin ["return " js-text ";"]
        ]
        "statement" [
            js-text + ";"
        ]
    ] [
        js-text
    ]
]
either-expr-to-js: function [node] [res] [
    res: rejoin [
        to-js node/condition "paren" " ? "
        to-js node/true-body "paren" " : "
    ]
    either node/false-body [
        res + to-js node/false-body "paren"
    ] [
        res + "null"
    ]
]
either-stmt-to-js: function [node context] [res] [
    res: rejoin [
        "if(" to-js node/condition "expression" "){"
        to-js node/true-body context
        "}"
    ]
    if node/false-body [
        either node/false-body/node-type = "either" [
            res: rejoin [
                res "else " to-js node/false-body context
            ]
        ] [
            res: rejoin [
                res "else{"
                to-js node/false-body context
                "}"
            ]
        ]
    ]
    res
]
try-to-js: function [code name def context] [] [
    rejoin [
        "try{"
        to-js code context
        "}catch(" name-to-js name "){"
        to-js def context
        "}"
    ]
]
words-to-js: function [words] [res word] [
    res: make-array
    foreach-blk 'word words [
        if word? word [
            append-array res name-to-js word/word
        ]
    ]
    apply 'res/join []
]


ast-value: function [value] [] [
    make-struct [
        node-type: "value/" + value/type/name
        value: value
        to-js: function [node context] [res] [
            switch node/value/type/name [
                "string!" [
                    res: apply 'JSON/stringify [node/value/string]
                ]
                "char!" [
                    res: apply 'JSON/stringify [node/value/string]
                ]
                "number!" [
                    res: apply 'node/value/number/to-string []
                ]
                "none!" [
                    res: "null"
                ]
                "logic!" [
                    either node/value/value [
                        res: "true"
                    ] [
                        res: "false"
                    ]
                ]
            ] [
                error make-struct [
                    category: "JS emitter"
                    id: "invalid-value"
                    message: "Cannot represent values of this type in JS"
                    args: node/value/type
                ]
            ]
            either context = "return" [
                rejoin ["return " res ";"]
            ] [
                res
            ]
        ]
    ]
]
ast-paren: function [expressions] [] [
    make-struct [
        node-type: "paren"
        expressions: expressions
        to-js: function [node context] [res] [
            to-js node/expressions context
        ]
    ]
]
ast-literal: function [text] [] [
    make-struct [
        node-type: "literal"
        text: text
        to-js: function [node context] [] [
            to-js-common node/text context
        ]
    ]
]
ast-get: function [word] [] [
    make-struct [
        node-type: "get"
        word: word
        to-js: function [node context] [] [
            to-js-common name-to-js node/word/word context
        ]
    ]
]
ast-get-path: function [expr selector] [] [
    switch selector/type/name [
        "paren!" [
            selector: compile selector
        ]
        "get-word!" [
            selector: ast-get selector
        ]
    ] [
        selector: ast-value selector
    ]
    make-struct [
        node-type: "get-path"
        expr: expr
        selector: selector
        to-js: function [node context] [sel] [
            either node/selector/node-type = "value/word!" [
                sel: "." + name-to-js node/selector/value/word
            ] [
                sel: rejoin ["[" to-js node/selector "expression" "]"]
            ]
            to-js-common rejoin [to-js node/expr "expression" sel] context
        ]
    ]
]
ast-set-path: function [expr selector set-to] [] [
    switch selector/type/name [
        "paren!" [
            selector: compile selector
        ]
        "get-word!" [
            selector: ast-get selector
        ]
    ] [
        selector: ast-value selector
    ]
    make-struct [
        node-type: "set-path"
        expr: expr
        selector: selector
        set-to: set-to
        to-js: function [node context] [res sel] [
            either node/selector/node-type = "value/word!" [
                sel: "." + name-to-js node/selector/value/word
            ] [
                sel: rejoin ["[" to-js node/selector "expression" "]"]
            ]
            res: rejoin [
                to-js node/expr "expression" sel "="
                to-js node/set-to "expression"
            ]
            switch context [
                "return" [
                    rejoin ["return (" res ");"]
                ]
                "statement" [
                    res + ";"
                ]
                "expression" [
                    rejoin ["(" res ")"]
                ]
                "paren" [
                    rejoin ["(" res ")"]
                ]
            ] []
        ]
    ]
]
ast-set: function [word set-to] [] [
    make-struct [
        node-type: "set"
        word: word
        set-to: set-to
        to-js: function [node context] [res words name i] [
            either node/word/type/name = "block!" [
                if context <> "statement" [
                    error make-struct [
                        category: "JS emitter"
                        id: "statement-only"
                        message: "SET with multiple words can only be a statement"
                    ]
                ]
                words: node/word
                res: rejoin [
                    "var _tmp=" to-js node/set-to "expression" ";"
                ]
                i: 0
                while [i < length-of words] [
                    name: pick words i
                    res: rejoin [
                        res
                        name-to-js name/word "=_tmp[" i "];"
                    ]
                    i: i + 1
                ]
                res
            ] [
                res: rejoin [
                    name-to-js node/word/word "="
                    to-js node/set-to "expression"
                ]
                switch context [
                    "return" [
                        rejoin ["return (" res ");"]
                    ]
                    "statement" [
                        res + ";"
                    ]
                    "expression" [
                        rejoin ["(" res ")"]
                    ]
                    "paren" [
                        rejoin ["(" res ")"]
                    ]
                ] []
            ]
        ]
    ]
]
ast-function-call: function [name args] [] [
    make-struct [
        node-type: "function-call"
        name: name
        args: args
        to-js: function [node context] [res i] [
            either node/name/type/name = "path!" [
                res: pick-array apply 'path!/compile [node/name make block! none] 0
                res: to-js res "expression"
            ] [
                res: name-to-js node/name/word
            ]
            res: res + "("
            if 0 < length-of-array node/args [
                res: res + to-js pick-array node/args 0 "expression"
                i: 1
                while [i < length-of-array node/args] [
                    res: rejoin [res "," to-js pick-array node/args i "expression"]
                    i: i + 1
                ]
            ]
            to-js-common res + ")" context
        ]
    ]
]
ast-expressions: function [list] [] [
    make-struct [
        node-type: "expressions"
        list: list
        to-js: function [node context] [i res] [
            i: 0
            res: ""
            switch context [
                "statement" [
                    while [i < length-of-array node/list] [
                        res: res + to-js pick-array node/list i "statement"
                        i: i + 1
                    ]
                ]
                "expression" [
                    if 1 < length-of-array node/list [
                        error make-struct [
                            category: "JS emitter"
                            id: "multiple-expressions"
                            message: "Multiple expressions in expression context (eg. paren! with more than one expression)"
                        ]
                    ]
                    res: to-js pick-array node/list 0 "expression"
                ]
                "paren" [
                    if 1 < length-of-array node/list [
                        error make-struct [
                            category: "JS emitter"
                            id: "multiple-expressions"
                            message: "Multiple expressions in expression context (eg. paren! with more than one expression)"
                        ]
                    ]
                    res: to-js pick-array node/list 0 "paren"
                ]
                "return" [
                    while [i + 1 < length-of-array node/list] [
                        res: res + to-js pick-array node/list i "statement"
                        i: i + 1
                    ]
                    either i < length-of-array node/list [
                        res: res + to-js pick-array node/list i "return"
                    ] [
                        res: "return null;"
                    ]
                ]
            ] []
            res
        ]
    ]
]
ast-function-definition: function [spec locals body] [] [
    make-struct [
        node-type: "function-definition"
        spec: spec
        locals: locals
        body: body
        to-js: function [node context] [res] [
            res: rejoin ["function(" words-to-js node/spec "){"]
            if not empty? node/locals [
                res: rejoin [res "var " words-to-js node/locals ";"]
            ]
            res: rejoin [
                res
                to-js node/body "return"
                "}"
            ]
            switch context [
                "return" [
                    rejoin ["return " res ";"]
                ]
                "expression" [res]
                "paren" [
                    rejoin ["(" res ")"]
                ]
                "statement" [
                    error make-struct [
                        category: "JS emitter"
                        id: "no-statement"
                        message: "Function definition cannot be used as a statement"
                    ]
                ]
            ] []
        ]
    ]
]
ast-throw: function [expr] [] [
    make-struct [
        node-type: "throw"
        expr: expr
        to-js: function [node context] [res] [
            res: rejoin ["throw " to-js node/expr "expression" ";"]
            switch context [
                "expression" [
                    error make-struct [
                        category: "JS emitter"
                        id: "statement-only"
                        message: "THROW cannot be used as an expression"
                    ]
                ]
                "statement" [
                    res
                ]
                "paren" [
                    error make-struct [
                        category: "JS emitter"
                        id: "statement-only"
                        message: "THROW cannot be used as an expression"
                    ]
                ]
                "return" [
                    res
                ]
            ] []
        ]
    ]
]
ast-either: function [condition true-body false-body] [] [
    make-struct [
        node-type: "either"
        condition: condition
        true-body: true-body
        false-body: false-body
        to-js: function [node context] [] [
            switch context [
                "statement" [
                    either-stmt-to-js node "statement"
                ]
                "expression" [
                    either-expr-to-js node
                ]
                "paren" [
                    rejoin ["(" either-expr-to-js node ")"]
                ]
                "return" [
                    either-stmt-to-js node "return"
                ]
            ] []
        ]
    ]
]
ast-not: function [expr] [] [
    make-struct [
        node-type: "not"
        expr: expr
        to-js: function [node context] [] [
            to-js-common "!" + to-js node/expr "paren" context
        ]
    ]
]
ast-struct: function [spec] [] [
    make-struct [
        node-type: "struct"
        spec: spec
        to-js: function [node context] [res i name expr] [
            res: "{"
            if 0 < length-of-array node/spec [
                name: pick-array node/spec 0
                expr: pick-array node/spec 1
                res: rejoin [res name-to-js name ":" to-js expr "expression"]
                i: 2
                while [i < length-of-array node/spec] [
                    name: pick-array node/spec i
                    expr: pick-array node/spec i + 1
                    res: rejoin [res "," name-to-js name ":" to-js expr "expression"]
                    i: i + 2
                ]
            ]
            to-js-common res + "}" context
        ]
    ]
]
ast-reduce: function [exprs] [] [
    make-struct [
        node-type: "reduce"
        exprs: exprs
        to-js: function [node context] [res i expr] [
            res: "["
            if 0 < length-of-array node/exprs [
                expr: pick-array node/exprs 0
                res: rejoin [res to-js expr "expression"]
                i: 1
                while [i < length-of-array node/exprs] [
                    expr: pick-array node/exprs i
                    res: rejoin [res "," to-js expr "expression"]
                    i: i + 1
                ]
            ]
            to-js-common res + "]" context
        ]
    ]
]
ast-while: function [condition body] [] [
    make-struct [
        node-type: "while"
        condition: condition
        body: body
        to-js: function [node context] [] [
            either context = "statement" [
                rejoin [
                    "while(" to-js node/condition "expression" "){"
                    to-js node/body "statement"
                    "}"
                ]
            ] [
                error make-struct [
                    category: "JS emitter"
                    id: "statement-only"
                    message: "WHILE can only be used as a statement"
                ]
            ]
        ]
    ]
]
ast-poke: function [arr pos value] [] [
    make-struct [
        node-type: "poke"
        arr: arr
        pos: pos
        value: value
        to-js: function [node context] [res] [
            res: rejoin [
                to-js node/arr "paren" "["
                to-js node/pos "expression" "]="
                to-js node/value "expression"
            ]
            switch context [
                "return" [
                    rejoin ["return (" res ");"]
                ]
                "statement" [
                    res + ";"
                ]
                "expression" [
                    rejoin ["(" res ")"]
                ]
                "paren" [
                    rejoin ["(" res ")"]
                ]
            ] []
        ]
    ]
]
ast-pick: function [arr pos] [] [
    make-struct [
        node-type: "pick"
        arr: arr
        pos: pos
        to-js: function [node context] [] [
            to-js-common rejoin [to-js node/arr "paren" "[" to-js node/pos "expression" "]"] context
        ]
    ]
]
ast-all: function [exprs] [] [
    make-struct [
        node-type: "all"
        exprs: exprs
        to-js: function [node context] [res i] [
            res: to-js pick-array node/exprs 0 "paren"
            i: 1
            while [i < length-of-array node/exprs] [
                res: rejoin [res "&&" to-js pick-array node/exprs i "paren"]
                i: i + 1
            ]
            switch context [
                "statement" [
                    error make-struct [
                        category: "JS emitter"
                        id: "no-statement"
                        message: "ALL cannot be used as a statement"
                    ]
                ]
                "expression" [
                    res
                ]
                "paren" [
                    rejoin ["(" res ")"]
                ]
                "return" [
                    rejoin ["return " res ";"]
                ]
            ] []
        ]
    ]
]
ast-any: function [exprs] [] [
    make-struct [
        node-type: "any"
        exprs: exprs
        to-js: function [node context] [res i] [
            res: to-js pick-array node/exprs 0 "paren"
            i: 1
            while [i < length-of-array node/exprs] [
                res: rejoin [res "||" to-js pick-array node/exprs i "paren"]
                i: i + 1
            ]
            switch context [
                "statement" [
                    error make-struct [
                        category: "JS emitter"
                        id: "no-statement"
                        message: "ANY cannot be used as a statement"
                    ]
                ]
                "expression" [
                    res
                ]
                "paren" [
                    rejoin ["(" res ")"]
                ]
                "return" [
                    rejoin ["return " res ";"]
                ]
            ] []
        ]
    ]
]
ast-regexp: function [exp flags] [] [
    make-struct [
        node-type: "regexp"
        exp: exp
        flags: flags
        to-js: function [node context] [] [
            to-js-common rejoin ["/" to-js-string node/exp "/" to-js-string node/flags] context
        ]
    ]
]
ast-switch: function [value cases def] [] [
    make-struct [
        node-type: "switch"
        value: value
        cases: cases
        def: def
        to-js: function [node context] [res i a-case] [
            switch context [
                "statement" [
                    res: rejoin ["switch(" to-js node/value "expression" "){"]
                    i: 0
                    while [i < length-of-array node/cases] [
                        a-case: pick-array node/cases i
                        res: rejoin [
                            res
                            "case " to-js a-case/value "expression" ":"
                            to-js a-case/expr "statement"
                            "break;"
                        ]
                        i: i + 1
                    ]
                    rejoin [
                        res
                        "default:"
                        to-js node/def "statement"
                        "}"
                    ]
                ]
                "expression" [
                    error make-struct [
                        category: "JS emitter"
                        id: "statement-only"
                        message: "SWITCH cannot be used as an expression"
                    ]
                ]
                "paren" [
                    error make-struct [
                        category: "JS emitter"
                        id: "statement-only"
                        message: "SWITCH cannot be used as an expression"
                    ]
                ]
                "return" [
                    res: rejoin ["switch(" to-js node/value "expression" "){"]
                    i: 0
                    while [i < length-of-array node/cases] [
                        a-case: pick-array node/cases i
                        res: rejoin [
                            res
                            "case " to-js a-case/value "expression" ":"
                            to-js a-case/expr "return"
                        ]
                        i: i + 1
                    ]
                    rejoin [
                        res
                        "default:"
                        to-js node/def "return"
                        "}"
                    ]
                ]
            ] []
        ]
    ]
]
ast-to-char: function [expr] [] [
    make-struct [
        node-type: "to-char"
        expr: expr
        to-js: function [node context] [] [
            to-js-common rejoin [
                "String.fromCharCode(" to-js node/expr "expression" ")"
            ] context
        ]
    ]
]
ast-try: function [code word def] [] [
    make-struct [
        node-type: "try"
        code: code
        word: word
        def: def
        to-js: function [node context] [] [
            switch context [
                "statement" [
                    try-to-js node/code node/word/word node/def "statement"
                ]
                "expression" [
                    error make-struct [
                        category: "JS emitter"
                        id: "statement-only"
                        message: "TRY cannot be used as an expression"
                    ]
                ]
                "paren" [
                    error make-struct [
                        category: "JS emitter"
                        id: "statement-only"
                        message: "TRY cannot be used as an expression"
                    ]
                ]
                "return" [
                    try-to-js node/code node/word/word node/def "return"
                ]
            ] []
        ]
    ]
]
ast-op: function [op val1 val2] [] [
    make-struct [
        node-type: "op/" + op
        op: op
        val1: val1
        val2: val2
        to-js: function [node context] [res] [
            res: rejoin [to-js node/val1 "paren" node/op to-js node/val2 "paren"]
            switch context [
                "statement" [
                    res
                ]
                "expression" [
                    res
                ]
                "paren" [
                    rejoin ["(" res ")"]
                ]
                "return" [
                    rejoin ["return " res ";"]
                ]
            ] []
        ]
    ]
]

; ===== COMPILER NATIVES ======================================================

parse-struct-spec: function [block] [result name expr] [
    block: block/value
    result: make-array
    while [not empty? block] [
        name: first block
        if name/type/name <> "set-word!" [
            error make-struct [
                category: "Compilation"
                id: "invalid-spec"
                message: "Invalid struct spec, expected set-word!, not"
                args: name/type
                stack: block
            ]
        ]
        block: skip block 1
        if empty? block [
            error make-struct [
                category: "Compilation"
                id: "invalid-spec"
                message: "Struct field is missing its value"
                stack: skip block -1
            ]
        ]
        set [expr block] compile-step block
        append-array result name/word
        append-array result expr
    ]
    result
]

compile-reduce: function [block] [result expr] [
    result: make-array
    while [not empty? block] [
        set [expr block] compile-step block
        append-array result expr
    ]
    result
]

compile-cases: function [cases] [cond orig-cases] [
    either empty? cases [
        none
    ] [
        orig-cases: cases
        set [cond cases] compile-step cases
        if empty? cases [
            error make-struct [
                category: "Compilation"
                id: "invalid-spec"
                message: "Missing case block after condition"
                stack: orig-cases
            ]
        ]
        either cond/node-type = "value/word!" [
            compile first cases
        ] [
            ast-either cond compile first cases compile-cases skip cases 1
        ]
    ]
]

native-compilers: make-struct [
    add: function [val1 val2] [] [ast-op "+" val1 val2]
    subtract: function [val1 val2] [] [ast-op "-" val1 val2]
    equal?: function [val1 val2] [] [ast-op "==" val1 val2]
    greater?: function [val1 val2] [] [ast-op ">" val1 val2]
    lesser?: function [val1 val2] [] [ast-op "<" val1 val2]
    not-equal?: function [val1 val2] [] [ast-op "!=" val1 val2]
    greater-or-equal?: function [val1 val2] [] [ast-op ">=" val1 val2]
    lesser-or-equal?: function [val1 val2] [] [ast-op "<=" val1 val2]
    function: function [spec locals body] [] [
        ast-function-definition spec/value locals/value compile body/value
    ]
    none: function [] [] [ast-value make none! none]
    true: function [] [] [ast-value make logic! true]
    false: function [] [] [ast-value make logic! false]
    throw: function [value] [] [ast-throw value]
    set: function [word expr] [] [ast-set word/value expr]
    if: function [condition body] [] [
        ast-either condition compile body/value none
    ]
    either: function [condition true-body false-body] [] [
        ast-either condition compile true-body/value compile false-body/value
    ]
    not: function [value] [] [ast-not value]
    make-struct: function [spec] [] [ast-struct parse-struct-spec spec]
    apply: function [func-name args] [] [
        ast-function-call func-name/value compile-reduce args/value
    ]
    reduce: function [block] [] [ast-reduce compile-reduce block/value]
    while: function [condblock body] [condition] [
        condblock: condblock/value
        if empty? condblock [
            error make-struct [
                category: "Compilation"
                id: "invalid-argument"
                message: "WHILE's condition block cannot be empty"
            ]
        ]
        set [condition condblock] compile-step condblock
        if not empty? condblock [
            error make-struct [
                category: "Compilation"
                id: "invalid-argument"
                message: "WHILE's condition block can only have one expression"
                stack: head condblock
            ]
        ]
        ast-while condition compile body/value
    ]
    make-array: function [] [] [ast-reduce make-array]
    poke-array: function [arr pos value] [] [ast-poke arr pos value]
    pick-array: function [arr pos] [] [ast-pick arr pos]
    all: function [block] [] [ast-all compile-reduce block/value]
    any: function [block] [] [ast-any compile-reduce block/value]
    regexp: function [exp flags] [] [ast-regexp exp/value flags/value]
    switch: function [value cases def] [expr compiled-cases] [
        cases: cases/value
        def: def/value
        compiled-cases: make-array
        while [not empty? cases] [
            set [expr cases] compile-step cases
            append-array compiled-cases make-struct [
                value: expr
                expr: compile first cases
            ]
            cases: skip cases 1
        ]
        ast-switch value compiled-cases compile def
    ]
    case: function [cases] [expr] [
        if empty? cases/value [
            error make-struct [
                category: "Compilation"
                id: "invalid-spec"
                message: "CASE needs at least one case"
            ]
        ]
        compile-cases cases/value
    ]
    to-char: function [number] [] [ast-to-char number]
    try: function [code word def] [] [
        ast-try compile code/value word/value compile def/value
    ]
    rejoin: function [block] [expr res] [
        block: block/value
        either empty? block [
            ast-value make string! ""
        ] [
            set [res block] compile-step block
            while [not empty? block] [
                set [expr block] compile-step block
                res: ast-op "+" res expr
            ]
            res
        ]
    ]
    js-error?: function [value] [] [
        ast-op " instanceof " value ast-literal "Error"
    ]
]
