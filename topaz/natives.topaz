; Topaz natives
;
; Copyright 2011 Gabriele Santilli
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files
; (the "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject
; to the following conditions:
;
; The above copyright notice and this permission notice shall be included
; in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
; OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
; OTHER DEALINGS IN THE SOFTWARE.

; ===== NATIVES ===============================================================

do: function [block] [result] [
    result: make none! none
    while [not empty? block] [
        set [result block] do-step first block block
    ]
    result
]

read: function [filename] [stat dir-contents i result] [
    stat: apply 'fs/stat-sync [filename]
    either apply 'stat/directory? [] [
        dir-contents: apply 'fs/readdir-sync [filename]
        result: make block! none
        i: 0
        while [i < length-of-array dir-contents] [
            result: insert result make string! pick-array dir-contents i
            i: i + 1
        ]
        head result
    ] [
        make string! apply 'fs/read-file-sync [filename "utf8"]
    ]
]

write: function [filename text] [] [
    apply 'fs/write-file-sync [filename text "utf8"]
    make none! none
]

compile-op: function [op expr1 expr2] [] [
    switch op/func/type/name [
        "function!" [
            ast-function-call op/func/name reduce [expr1 expr2]
        ]
        "native!" [
            apply 'op/func/compile [expr1 expr2]
         ]
    ] []
]

compile-step: function [block] [value expr op expr2] [
    value: first block
    try [
        set [expr block] apply 'value/type/compile [value block]
    ] 'e [
        throw rejoin [e "^/*** Compiling: " mold-value block ""]
    ]
    while [op: operator? block] [
        block: skip block 1
        if empty? block [error "Compile" "Operator missing its second argument" mold-value skip block -2 ""]
        value: first block
        set [expr2 block] apply 'value/type/compile [value block]
        expr: compile-op op expr expr2
    ]
    reduce [expr block]
]

compile: function [block] [result expr] [
    result: make-array
    while [not empty? block] [
        set [expr block] compile-step block
        append-array result expr
    ]
    ast-expressions result
]

set-words: function [words values] [i] [
    i: 0
    while [i < length-of words] [
        set-word pick words i pick values i
        i: i + 1
    ]
    values
]

find: function [series value] [] [
    while [all [not empty? series not equal? value first series]] [series: skip series 1]
    series
]

; ===== VALUES THAT CAN BE CONJURED ===========================================

values: make-struct [
    native!: native!
    make: make native! reduce [
        load make string! "type arguments" true
        function [type arguments] [] [
            apply 'type/topaz-make [arguments]
        ]
    ]
    datatype!: datatype!
    block!: block!
    paren!: paren!
    path!: path!
    set-path!: set-path!
    lit-path!: lit-path!
    string!: string!
    char!: char!
    number!: number!
    word!: word!
    set-word!: set-word!
    lit-word!: lit-word!
    function!: function!
    op!: op!
    none!: none!
    logic!: logic!
    context!: context!
    system-words: system-words
    expression!: expression!
]

; ===== NATIVES THAT CAN BE MADE ==============================================

natives: make-struct [
    foreach: function [words series body] [ctx res] [
        ctx: make context! none
        switch words/type/name [
            "word!" [
                words: append make block! none words
            ]
            "block!" []
        ] [
            error "Script" "FOREACH expected a word! or block! - not " + words/type/name ""
        ]
        bind words ctx true
        bind body ctx false
        res: make none! none
        while [not empty? series] [
            set-words words series
            res: do body
            series: skip series length-of words
        ]
        res
    ]
    set: function [word value] [] [
        switch word/type/name [
            "word!" [
                set-word word value
            ]
            "set-word!" [
                set-word word value
            ]
            "lit-word!" [
                set-word word value
            ]
            "block!" [
                set-words word value
            ]
        ] [
            error "Script" "SET expected a word! or block! - not " + word/type/name ""
        ]
    ]
    reduce: function [block] [result value] [
        result: make block! none
        while [not empty? block] [
            set [value block] do-step first block block
            append result value
        ]
        result
    ]
    insert: function [series value] [] [insert series value]
    head: function [series] [] [head series]
    pick: function [series pos] [] [pick series pos/number]
    length-of: function [series] [] [make number! length-of series]
    skip: function [series amount] [] [skip series amount/number]
    mold: function [value indent] [] [make string! mold-value value indent/string]
    do: function [block] [] [do block]
    get: function [word] [value] [
        value: get word
        if not value [
            error "Script" "Word has no value" mold-value word ""
        ]
        value
    ]
    bind: function [words context] [] [bind words context false]
    tail: function [series] [] [tail series]
    print: function [string] [] [
        print (to-js-string string) + "^/"
        string
    ]
    prin: function [string] [] [
        print to-js-string string
        string
    ]
    load: function [string] [] [load string false]
    read: function [filename] [] [read to-js-string filename]
    try: function [code word def] [res ctx] [
        try [
            res: do code
        ] 'e [
            ctx: make context! none
            bind-word ctx word true
            set-word word make string! e
            res: do bind def ctx false
        ]
        res
    ]
    add: function [val1 val2] [] [make number! val1/number + val2/number]
    subtract: function [val1 val2] [] [make number! val1/number - val2/number]
    equal?: function [val1 val2] [] [make logic! equal? val1 val2]
    greater?: function [val1 val2] [] [make logic! val1/number > val2/number]
    lesser?: function [val1 val2] [] [make logic! val1/number < val2/number]
    not-equal?: function [val1 val2] [] [make logic! not equal? val1 val2]
    greater-or-equal?: function [val1 val2] [] [make logic! val1/number >= val2/number]
    lesser-or-equal?: function [val1 val2] [] [make logic! val1/number <= val2/number]
    compile: function [block] [] [
        make string! to-js compile block "statement"
    ]
    write: function [filename text] [] [
        write to-js-string filename to-js-string text
    ]
    throw: function [value] [] [
        throw value/string
    ]
    if: function [condition body] [] [
        either true? condition [
            do body
        ] [
            make none! none
        ]
    ]
    either: function [condition true-body false-body] [] [
        do either true? condition [true-body] [false-body]
    ]
    not: function [value] [] [make logic! not true? value]
    apply: function [func args] [] [error "Internal" "APPLY is not yet implemented" ""]
    while: function [condblock body] [res] [
        res: make none! none
        while [true? do condblock] [res: do body]
        res
    ]
    until: function [body] [res] [
        res: do body
        while [not true? res] [res: do body]
        res
    ]
    all: function [block] [res] [
        either empty? block [
            make logic! true
        ] [
            set [res block] do-step first block block
            while [all [true? res not empty? block]] [
                set [res block] do-step first block block
            ]
            res
        ]
    ]
    any: function [block] [res] [
        either empty? block [
            make none! none
        ] [
            set [res block] do-step first block block
            while [all [not true? res not empty? block]] [
                set [res block] do-step first block block
            ]
            res
        ]
    ]
    switch: function [value cases def] [case-block orig-cases] [
        either empty? cases: find cases value [
            do def
        ] [
            orig-cases: cases
            while [all [
                not empty? cases
                case-block: first cases
                case-block/type/name <> "block!"
            ]] [cases: skip cases 1]
            either empty? cases [
                error "Script" "Invalid argument for SWITCH" mold-value orig-cases ""
            ] [do case-block]
        ]
    ]
    find: function [series value] [] [find series value]
    case: function [cases] [cond] [
        either empty? cases [
            make none! none
        ] [
            set [cond cases] do-step first cases cases
            while [not true? cond] [
                cases: skip cases 1
                set [cond cases] do-step first cases cases
            ]
            either empty? cases [
                make none! none
            ] [
                do first cases
            ]
        ]
    ]
    context-of: function [word] [] [word/context]
    rejoin: function [block] [result value] [
        result: ""
        while [not empty? block] [
            set [value block] do-step first block block
            value: either value/type/name = "string!" [
                value/string
            ] [
                mold-value value ""
            ]
            result: rejoin [result value]
        ]
        make string! result
    ]
    to-word: function [value] [] [
        either value/type/name = "datatype!" [
            make word! value/name
        ] [
            error "Script" "Invalid argument for TO-WORD" mold-value value ""
        ]
    ]
    to-lit-word: function [value] [] [
        either any [value/type/name = "word!" value/type/name = "set-word!"] [
            make lit-word! value/word
        ] [
            error "Script" "Invalid argument for TO-LIT-WORD" mold-value value ""
        ]
    ]
    type?: function [value] [] [value/type]
    copy: function [value] [] [apply 'value/type/copy [value]]
    ; not really used in the interpreter
    function: function [spec locals body] [] []
    none: function [] [] []
    true: function [] [] []
    false: function [] [] []
    make-struct: function [spec] [] []
    make-array: function [] [] []
    poke-array: function [arr pos value] [] []
    pick-array: function [arr pos] [] []
    regexp: function [exp flags] [] []
    to-char: function [number] [] []
]

; ===== CONJURE ===============================================================

set-word load make string! "conjure" false make native! reduce [
    load make string! "name" true
    function [name] [] [
        values/(name-to-js name/word)
    ]
]
