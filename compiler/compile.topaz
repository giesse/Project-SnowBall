Topaz [
    Title: "Topaz compiler - COMPILE function"
    Author: "Gabriele Santilli"
    Copyright: 2011
    ; License: {
    ;     Permission is hereby granted, free of charge, to any person obtaining
    ;     a copy of this software and associated documentation files
    ;     (the "Software"), to deal in the Software without restriction, including
    ;     without limitation the rights to use, copy, modify, merge, publish,
    ;     distribute, sublicense, and/or sell copies of the Software, and to
    ;     permit persons to whom the Software is furnished to do so, subject
    ;     to the following conditions:

    ;     The above copyright notice and this permission notice shall be included
    ;     in all copies or substantial portions of the Software.

    ;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    ;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ;     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    ;     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ;     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ;     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ;     OTHER DEALINGS IN THE SOFTWARE.
    ; }
]

; Topaz function -> expression tree -> simplification/optimization
;  -> target language AST -> target language text

compile: func [
    "Compile a FUNCTION! or ACTION! to a given target language"
    f [function! action!]
    language [word!] "Target language, eg. 'Javascript"

    return: code [string!] "The code in the target language"
] [
    expression-to-language make-fundef :f language
]

make-fundef: action [
    "Create a function definition expression object"
    f

    return: fundef-expr [object!]
] [
    function!: [
        probe object fundef-expr [
            arguments: parse-arguments context-of :f spec-of :f
            body: block-to-expression empty-environment body-of :f
        ]
    ]
    action!: [
    ]
    native!: [
        ; TODO
        object none [
            type: 'native-fundef
            native: :f
        ]
    ]
    return!: [
        ; this may be a problem?
    ]
]

empty-environment: func [
    "Return an empty environment"

    return: environment [block!]
] [
    make block! none
]

parse-arguments: func [
    "Parse function argument spec"
    context [context!] "The function's context"
    spec [block!] "The function's argument spec"

    return: arguments [block!] "Block of argument objects"
] [
    parse spec [
        collect [
            opt string!
            any [
                name: word! types: opt block! opt string!
                keep (
                    object func-argument [
                        var-id: var-id-of bind name context
                        name: name
                        types: if types [make typeset! types]
                    ]
                )
            ]
            opt [
                literal options:
                some [
                    name: word! types: opt block! opt string!
                    keep (
                        object func-argument [
                            var-id: var-id-of bind name context
                            name: name
                            types: if types [make typeset! types]
                            optional
                        ]
                    )
                    |
                    name: set-word! default-value: do-step types: opt block! opt string!
                    keep (
                        object func-argument [
                            var-id: var-id-of bind name context
                            name: make word! name
                            default-value: default-value
                            types: if types [make typeset! types]
                            optional
                        ]
                    )
                ]
            ]
            [
                literal return:
                return-arguments: collect any [
                    name: word! types: opt block! opt string!
                    keep (object func-argument [
                        name: name
                        types: if types [make typeset! types]
                    ])
                ] (
                    set-compiler-value bind 'return context object func-return [
                        arguments: return-arguments
                    ]
                )
                |
                (set-compiler-value bind 'return context object func-return [])
            ]
        ]
    ]
]

new-var-id: func [
    "Return a new variable id"

    return: id [number!]
] [
    id: [-1]
    id/0: id/0 + 1
    id/0
]

var-id-of: func [
    "Return the variable id of a word"
    word [any-word!]

    return: id [number!]
] [
    either number? id: get-compiler-value word [
        id
    ] [
        id: new-var-id
        set-compiler-value word id
    ]
]

fundef-expr: object none [
    fundef?: yes
]

func-argument: object none [
]

func-return: object none [
]

block-to-expression: func [
    "Convert a Topaz code block to an expression object (parsing pass)"
    environment [block!]
    block [block!]

    return:
        environment [block!]
        result [object!]
] [
    result: object empty-expression []
    while [not empty? block] [
        set this-context b2e-step environment block
    ]
    return environment result
]

empty-expression: object none [
    evaluate: func [environment expression] [expression]
]

b2e-step: func [
    "Convert a Topaz code block to an expression object (one step)"
    environment [block!]
    block [block!]

    return:
        environment [block!] "New environment as modified by the expression"
        result [object!] "Expression object representing the first expression in the block"
        block [block!] "Position of the next expression in the block"
] [
    value: first block
    result: none
    set this-context value-to-expr value environment block
    while [op: operator? block] [
        block: next block
        if empty? block [
            cause-error [
                category: 'Compilation
                id: 'missing-argument
                message: "The operator is missing its second argument"
                stack: skip block -2
            ]
        ]
        expr2: value-to-expr first block environment block
        result: object op-expr [
            op: :op
            expr1: result
            expr2: expr2/result
        ]
        environment: expr2/environment
        block: expr2/block
    ]
    return environment result block
]

value-to-expr: action [
    "Convert a specific value to an expression object"
    value
    environment [block!]
    block [block!] "Code block at the position of VALUE"

    return:
        environment [block!] "New environment as modified by the expression"
        result [object!] "Expression object representing the result"
        block [block!] "Position of the next expression in the block"
] [
    word!: [
        word: value
        either object? expr: get-compiler-value word [
            either expr/fundef? [
                compile-function-call environment expr block
            ] [
                cause-error "This should not happen"
            ]
        ] [
            value: get/any word
            ; this will need to check for word being constant
            either any-function? :value [
                fundef: make-fundef :value
                set-compiler-value word fundef
                compile-function-call environment fundef block
            ] [
                result: get-variable environment var-id-of word
                return environment result next block
            ]
        ]
    ]
    default: [
        expression: object value-expr [
            value: value
        ]
        return environment expression next block
    ]
]

get-variable: func [
    "Return the expression object that represents the value of a variable"
    environment [block!]
    var-id [number!]

    return: result [object!]
] [
    any [
        pick environment var-id
        object get-expr [
            var-id: var-id
        ]
    ]
]

value-expr: object none [
    evaluate: func [environment expression] [expression]
]

get-expr: object none [
    evaluate: func [environment expression] [
        any [
            pick environment expression/var-id
            expression
        ]
    ]
]

compile-function-call: func [
    "Compile a function call into a expression object"
    environment [block!] "Current environment"
    fundef [object!] "Function definition object"
    block [block!] "Topaz code block (to collect arguments)"

    return:
        environment [block!] "New environment after evaluating the function"
        result [object!] "Expression object representing the result of the function"
        block [block!] "Position of the next expression in the block (after all arguments)"
] [
    block: next block
    result: none
    foreach 'arg fundef/arguments [
        if not arg/optional [
            argument: b2e-step environment block
            environment: make-environment argument/environment [arg/var-id argument/result]
            block: argument/block
        ]
    ]
    set this-context evaluate-function environment fundef/body
    return environment result block
]

evaluate-function: func [
    "Compute the result expression of a function"
    environment [block!] "Environment, including actual arguments"
    func-body [object!] "Function body to evaluate"

    return:
        environment [block!] "New environment after function evaluation"
        result [object!] "The function's result"
] [
    new-environment: copy environment
    changes: func-body/environment
    while [not empty? changes] [
        if changes/1 [
            new-environment/1: evaluate-expression environment changes/1
        ]
        changes: next changes
        new-environment: next new-environment
    ]
    return head new-environment evaluate-expression environment func-body/result
]

make-environment: func [
    "Return a new environment after modifying one or more variables"
    environment [block!]
    changes [block!]

    return: environment [block!]
] [
    changes: reduce changes
    environment: copy environment
    foreach [var-id expression] changes [
        environment/(var-id): expression
    ]
    environment
]

operator?: func [block] [
    if not empty? block [
        value: first block
        if word? :value [value: get/any value]
        if op? :value [
            :value
        ]
    ]
]

evaluate-expression: func [environment expression] [
    expression/evaluate environment expression
]

op-expr: object none [
    evaluate: func [environment expression] [
        object expression [
            expr1: evaluate-expression environment expression/expr1
            expr2: evaluate-expression environment expression/expr2
        ]
    ]
]

expression-to-language: func [
    "Convert an expression object to the given target language"
    expression [object!]
    language [word!]

    return: code [string!] "The code in the target language"
] [
    expression: simplify-expression expression
    lang-ast: expression-to-lang-ast expression language
    lang-ast-to-string lang-ast
]

simplify-expression: func [
    "Simplify and optimize an expression object"
    expression [object!]

    return: expression [object!]
] [
    expression/simplify expression
]

expression-to-lang-ast: func [
    "Convert an expression to the AST of a specific language"
    expression [object!]
    language [word!]

    return: lang-ast [object!]
] [
]

lang-ast-to-string: func [
    "Convert a language AST object to code text"
    lang-ast [object!]

    return: code [string!]
] [
    lang-ast/to-string lang-ast
]
